{"version":3,"sources":["components/SubList.js","components/LoadingSpinner.js","components/PostLink.js","components/PostList.js","components/Comment.js","components/Comments.js","components/Post.js","components/Header.js","components/SortButtons.js","App.js","serviceWorker.js","index.js"],"names":["SubList","react_default","a","createElement","className","map","sub","i","link","NavLink","activeClassName","key","to","LoadingSpinner","PostLink","props","post","thumbnail","src","alt","test","bodyTag","dangerouslySetInnerHTML","__html","body","bodyHasImage","url","match","media","length","openBtn","onClick","e","preventDefault","bodyDiv","target","parentNode","querySelector","classList","toggle","contains","innerText","stickied","Link","concat","id","title","href","rel","domain","author","num_comments","permalink","PostList","_ref","posts","src_components_LoadingSpinner","src_components_PostLink","Comment","_this$props","this","comment","replies","components_Comments","comments","commentDiv","score","body_html","Component","Comments","src_components_Comment","Post","_props$postDetails","postDetails","shortUrl","substr","Header","heading","onReload","SortButtons","currentSort","option","toLowerCase","Page","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkUrlAndUpdate","onChangeSortMethod","sortMethod","setState","getPostList","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","state","fetch","sent","json","error","children","oembed","parseBodyText","html","selftext_html","subreddit","t0","console","log","stop","_x","apply","arguments","getPostDetails","_ref2","_callee2","_data$0$data$children","_url","_context2","obj","parseComment","_x2","postId","_this2","src_components_SubList","components_Header","components_SortButtons","Switch","Route","exact","path","render","src_components_PostList","assign","src_components_Post","text","replace","_this3","force","undefined","location","pathname","matches","postInfo","find","prevProps","prevState","App","BrowserRouter","component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c0fe67f.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './SubList.css';\n\nconst SubList = () => {\n    \n    //temp sub list (maybe change to browser storage?)\n    const subs = [\n        'PSVR','PS4','Apple','iPhone','NoMansSkyTheGame','Minecraft','PS4Deals'\n    ];\n    \n    return (\n        <div className=\"subLinks\">\n            {\n                subs.map((sub,i) => {\n                    const link = '/'+sub;\n                    return <NavLink className=\"navLink\" activeClassName=\"active\" key={i} to={link}>{sub}</NavLink>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SubList;","import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loadingSpinner\"></div>\n    );\n};\n\nexport default LoadingSpinner;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PostLink.css';\n\nconst PostLink = (props) => {\n    const {sub, post} = props;\n    \n    //decide whether to show a thumbnail    \n    let thumbnail = (\n        <div className=\"postThumbnail\">\n            <img src={post.thumbnail} alt=\"Thumbnail for post\" />\n        </div>\n    )\n\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === false){\n        thumbnail = <span></span>;\n    }\n\n    //toggle post body text open and closed\n    function toggleBodyOpen(e){\n        e.preventDefault();\n        const postDiv = e.target.parentNode.parentNode.parentNode;\n        const bodyDiv = postDiv.querySelector('.postLinkBody');\n\n        bodyDiv.classList.toggle('open');\n        if (bodyDiv.classList.contains('open')) e.target.innerText = '[ - ] ';\n        else e.target.innerText = '[ + ] ';\n    }\n    \n    //if there's a link to an image, replace that link with an img tag (maybe remove?)\n    // const imageLinksInBodyFull = post.body.match(/<a href=.+?(\\.(png|jpg|jpeg|bmp)).+?(<\\/a>)/g);\n    // if (imageLinksInBodyFull){\n    //     imageLinksInBodyFull.forEach(linkTag => {\n    //         const imageLinkInBody = linkTag.match(/\"http([a-zA-Z0-9\\W]+(.png|.jpg|.jpeg))\"/)[0].replace(/\"/g,'');\n    //         post.body = post.body.replace(linkTag, '<img src=\"'+imageLinkInBody+'\"/>');\n    //     });\n    // }\n    \n    //decide whether to show image preview in body\n    let bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.body}}></div>;\n    let bodyHasImage = false;\n    if (post.url.match(/.jpg$/)){\n        bodyTag = (<div className=\"postLinkBody\">\n            <img src={post.url} alt=\"Preview user linked to\" />\n        </div>);\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.media}}></div>;\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show an open button for post body\n    let openBtn = (<span> - <span className=\"postLinkOpen\" onClick={toggleBodyOpen}>[ + ] </span></span>);\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = <span></span>;\n    \n    //check if sticked and add another class\n    let className = 'postLink';\n    if (post.stickied) className += ' stickied';\n    \n    return (\n        <div className={className}>\n            {thumbnail}\n            <div className=\"postLinkContent\">\n                <Link to={`${sub}/${post.id}`} className=\"postLinkTitle\">{post.title}</Link>\n                <div className=\"postLinkMiddle\">\n                    <a className=\"postLinkDomain\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.domain} - </a>\n                    <span className=\"postLinkAuthor\">{post.author}</span>\n                    {openBtn}\n                </div>\n                {bodyTag}\n                <div className=\"postLinkFooter\">\n                    <Link to={`${sub}/${post.id}`} className=\"postLinkComments\">{post.num_comments} Comments </Link>\n                    - <a className=\"postLinkReddit\" href={'https://www.reddit.com'+post.permalink} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PostLink;\n\n\n\n/*\n\nscore: data.score,\nsubreddit: data.subreddit,\n*/","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\nimport PostLink from './PostLink';\nimport './PostList.css';\n\nconst PostList = ({posts, sub}) => {    \n    if (posts && posts.length === 0){\n        return (\n            <LoadingSpinner />\n        );\n    } else if (posts) {\n        return (\n            <div className=\"postListDiv\">\n                {\n                    posts.map(post => {\n                        return <PostLink key={post.id} post={post} sub={sub}/>\n                    })\n                }\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"postListDiv\">No Posts Found</div>\n        )\n    }\n};\n\nexport default PostList;","import React, {Component} from 'react';\nimport Comments from './Comments';\nimport './Comment.css';\n\nclass Comment extends Component {\n    render(){\n        let {comment, author} = this.props;\n        \n        //if there are any replies to this comment, create a new Comments object (will work recursively)\n        let replies = \"\";\n        if (comment.replies.length > 0){\n            replies = <Comments comments={comment.replies} author={author}/>;\n        }\n        \n        function toggleCommentClose(e){\n            e.preventDefault();\n            const commentDiv = e.target.parentNode.parentNode;\n            commentDiv.classList.toggle('closed');\n            if (commentDiv.classList.contains('closed')) e.target.innerText = '[ + ] ';\n            else e.target.innerText = '[ - ] ';\n        }\n        \n        return (\n            <div className=\"commentDiv\">\n                <div className=\"commentHeader\">\n                    <span className=\"commentClose\" onClick={toggleCommentClose}>[ - ] </span>\n                    <span className={comment.author === author ? \"commentAuthor OP\" : \"commentAuthor\"}>{comment.author}</span><span className=\"commentScore\"> | {comment.score}</span>\n                </div>\n                \n                <div className=\"commentText\" dangerouslySetInnerHTML={{ __html: comment.body_html }}></div>\n                \n                <div className=\"commentFooter\">\n                    <a className=\"commentPermalink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"http://www.reddit.com\"+comment.permalink}>Permalink</a>\n                </div>\n                {replies}\n            </div>\n        );\n    }\n}\n// const Comment = (props) => {\n// \n// }\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Comments = ({comments, author}) => {\n    if (comments && comments.length > 0) {\n        return (\n            <div className=\"comments\">\n            {\n                comments.map(comment => {\n                    if (!comment.author) return null;\n                    return <Comment key={comment.id} comment={comment} author={author} />\n                })\n            }\n            </div>\n        );\n    } else if (comments) {\n        return (\n            <div></div>\n        );\n    } else if (!comments){\n        return (\n            // <div>Loading Comments...</div>\n            <LoadingSpinner />\n        );\n    }\n}\n\nexport default Comments;","import React from 'react';\nimport Comments from './Comments';\nimport './Post.css';\n\nconst Post = (props) => {\n    let {title, body, comments, url, media, author} = props.postDetails;\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <div dangerouslySetInnerHTML={{ __html: body }}></div>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <img src={url} alt=\"Preview of content\"/>\n    }\n    \n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n    \n    //check for media embed and replace body with this\n    if (media && media.length > 0){\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <div dangerouslySetInnerHTML={{ __html: media }}></div>\n    }\n    \n    return (\n        <div>\n            {\n                title.length === 0 ? <h1 className=\"loading\">Loading...</h1> : (\n                    <div className=\"postDiv\">\n                        <h1>{title}</h1>\n                        <div className=\"postMiddle\">\n                            <span>{author}</span>\n                            <a className=\"postGoToURL\" href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>\n                        </div>\n                        {bodyTag}\n                        <hr/>\n                        <Comments comments={comments} author={author} />\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 className=\"subHeader\">{heading} <span className=\"reloadButton\" onClick={onReload}>&#8635;</span></h1>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst SortButtons = ({onClick, currentSort}) => {\n    let sortOptions = [\n        'Hot','New','Rising','Controversial','Top'\n    ];\n    \n    return (\n        <div className=\"sortButtons\">\n            {\n                sortOptions.map((option,i) => {\n                    let className = 'sortButton';\n                    if (option.toLowerCase() === currentSort){\n                        className += ' active';\n                    }\n                    return <span key={i} className={className} onClick={onClick}>{option.toLowerCase()}</span>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SortButtons;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SubList from './components/SubList';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SortButtons from './components/SortButtons';\n\nclass Page extends Component {\n    constructor(){\n        super();\n        this.state = {\n            sub: '',\n            postId: '',\n            sortMethod: 'hot',\n            posts: [],\n            postDetails: {title: '', body: '', id: '', comments: []}\n        };\n    }\n    \n    render(){\n        return (\n            <div>\n                <SubList />\n                <Header heading={this.state.sub} onReload={this.onReload}/>\n                <SortButtons onClick={this.onChangeSortMethod} currentSort={this.state.sortMethod}/>\n                <hr/>\n                <Switch>\n                    <Route exact path=\"/\" render={props => <PostList {...props} posts={this.state.posts} sub={this.state.sub}/>} />\n                    <Route exact path=\"/:sub\" render={props => <PostList {...props} posts={this.state.posts} sub={this.state.sub}/>} />\n                    <Route exact path=\"/:sub/:post\" render={props => <Post {...props} postDetails={this.state.postDetails} />} />\n                </Switch>\n            </div>\n        );\n    }\n    \n    onReload = () => {\n        this.checkUrlAndUpdate(true);\n    }\n    \n    onChangeSortMethod = (e) => {\n        let sortMethod = e.target.innerText.toLowerCase();\n        this.setState({sortMethod});\n    }\n    \n    parseBodyText(text){\n        text ? text = text\n                        .replace(/&lt;/g,'<')\n                        .replace(/&gt;/g,'>')\n                        .replace(/&amp;#39;/g,\"'\")\n                        .replace(/&amp;quot;/g,'\"')\n                        .replace(/&amp;/g,\"&\")\n                        .replace(/&#x200B;/g,' ')\n                         : text = '';\n        return text;\n    }\n\n    getPostList = async (sub) => {\n        if (sub.length > 0) sub = 'r/'+sub;\n        \n        try {\n            let url = 'https://www.reddit.com/'+sub+'/'+this.state.sortMethod+'/.json';\n            if (sub.length === 0) url = 'https://www.reddit.com/.json';\n\n            let response = await fetch(url);\n            let data = await response.json();\n\n            if (data.error){\n                this.setState({posts: null});\n            } else {\n                if (data && data.data && data.data.children){\n                    let posts = data.data.children.map(post => {\n                        const data = post.data;\n\n                        let media = data.media;\n                        if (media && media.oembed){\n                            media = this.parseBodyText(media.oembed.html);\n                        } else {\n                            media = '';\n                        }\n                        \n                        return {\n                            author: data.author,\n                            domain: data.domain,\n                            title: this.parseBodyText(data.title),\n                            id: data.id,\n                            body: this.parseBodyText(data.selftext_html),\n                            num_comments: data.num_comments,\n                            score: data.score,\n                            subreddit: data.subreddit,\n                            stickied: data.stickied,\n                            url: data.url,\n                            thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                            permalink: data.permalink,\n                            media: media\n                        };\n                    });\n                    \n                    if (posts.length === 0) posts = null;\n                    this.setState({posts});\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            this.setState({posts:null});\n        }\n    };\n    \n    parseComment(comment){\n        let {body_html, id, author, permalink, replies, score} = comment;\n        body_html = this.parseBodyText(body_html);\n        \n        replies = typeof replies === 'object' ? replies.data.children : [];\n        \n        replies = replies.map(comment => {\n            //console.log(comment);\n            return this.parseComment(comment.data);\n        });\n        \n        return {body_html, id, author, permalink, replies, score};\n    }\n    \n    getPostDetails = async (url) => {\n        try {\n            let response = await fetch('https://www.reddit.com/r/'+url+'.json');\n            let data = await response.json();\n            \n            if (data.error){\n                this.setState({postDetails: {title: 'Not Found', body: '', id: ''}});\n            } else {\n                let {title, selftext_html, id, url, media, author} = data[0].data.children[0].data;\n\n                let comments = data[1].data.children.map(obj => {\n                    return this.parseComment(obj.data);\n                });\n                \n                if (media && media.oembed){\n                    media = this.parseBodyText(media.oembed.html);\n                } else {\n                    media = '';\n                }\n\n                //if this exists, replace &lt etc with proper symbols, otherwise set to empty string\n                selftext_html = this.parseBodyText(selftext_html);\n                this.setState({postDetails: {title, body: selftext_html, id, url, media, comments, author}});\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    checkUrlAndUpdate(force = false){\n        let url = this.props.location.pathname.replace('/','');\n        \n        let matches = this.props.location.pathname.match(/\\//g);\n        matches = matches ? matches.length : 0;\n\n        if (matches === 1){\n            //on sub, so get post list\n            if (url !== this.state.sub || force){\n                this.setState({sub: url, posts:[]});\n                this.getPostList(url);\n            }\n        } else if (matches === 2){\n            //on post, so get post list and post details if different to current state\n            let sub = url.replace(/\\/[a-zA-Z0-9]+/,'');\n            let postId = url.replace(/[a-zA-Z0-9]+\\//,'');\n            \n            if (sub !== this.state.sub || force){\n                this.setState({sub, posts: []});\n                this.getPostList(sub);\n            }\n            \n            if (postId !== this.state.postId || force){\n                //check if post details already exists within the current post array, and if so, use that for quicker rendering\n                let postInfo = this.state.posts.find(post => post.id === postId);\n                if (postInfo){\n                    this.setState({sub, postId, postDetails: postInfo});\n                } else {\n                    this.setState({sub, postId, postDetails: {title:'', body:'', id:''}});\n                }\n                this.getPostDetails(`${sub}/${postId}`);\n            }\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        let force = false;\n        if (prevState.sortMethod !== this.state.sortMethod) force = true;\n        this.checkUrlAndUpdate(force);        \n    }\n    \n    componentDidMount(){\n        this.checkUrlAndUpdate(true);\n    }\n}\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path='/' component={Page} />\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}