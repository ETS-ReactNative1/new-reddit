{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Gallery.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","checkIfSubbed","subs","currentSub","length","includes","SubList","dispatch","useDispatch","useSelector","state","currentSort","setSubs","val","type","payload","useState","editMode","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","onDeleteSub","sub","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","to","className","onClick","map","key","style","textTransform","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","display","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","onKeyPress","width","saved","currentPostId","obj","id","url","fontSize","title","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","saveMenuOpen","Fragment","SaveList","initialState","currentUser","postDetails","posts","noPosts","noMorePosts","latestPost","comments","extraComments","noComments","searchForSubs","previousUrl","permalinkUrl","showContext","store","createStore","action","data","parseComment","parent","kind","permalink","match","parent_id","replace","body_html","name","author","replies","score","comment","created_utc","parseBodyText","children","parseLinks","text","redditMatches","forEach","parseBool","str","getMySubs","prepend","join","getPostList","a","loadMore","force","getState","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","body","selftext_html","num_comments","stickied","thumbnail","media_embed","noMore","getMoreComments","fullUrl","setExtraComments","newComments","parentComment","undefined","find","newExtras","getComments","setComments","setNoComments","setPostDetails","context","media_metadata","is_gallery","gallery_data","PostTitle","PostTextGroup","PostDetails","PostExpand","StyledPostLink","PostThumbnail","PostComments","PostBody","React","memo","onClickLink","expanded","setExpanded","dateString","formatDistanceStrict","Date","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","href","rel","openBtn","maxWidth","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","toLowerCase","StyledCommentList","CommentList","StyledComment","single","CommentClose","span","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","permalinkComment","extras","pointString","color","backgroundColor","LoadingSpinner","PostList","textAlign","hide","position","top","hasMore","margin","marginBottom","dataLength","next","loader","scrollableTarget","scrollThreshold","StyledComp","getURL","index","limit","u","Gallery","extraData","firstId","Object","keys","setId","isMobile","useMediaQuery","level4","level5","indexOf","numberOfImages","p","s","caption","extraDataObj","items","media_id","onClickThumb","nextId","left","zIndex","values","i","StyledPost","ScrollButton","SimpleButton","parsePostBody","bodyTag","content","Post","updatePostDetails","window","scrollTo","urlMatches","localUrl","shortUrl","substr","isSaved","urlTag","newSaved","link","commentDiv","document","querySelector","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","onReload","StyledSideMenu","SavedButton","SideMenu","showSaved","setShowSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","currentContext","setCurrentUser","parts","newSort","postId","userSort","user","parseURL","pathname","searchStr","parseSearch","storedSaves","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setContext","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c1427d.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                subs.map(sub => {\n                    return (\n                        <ButtonGroup key={'sub-'+sub}>\n                            <NavLink to={`/${sub}/${currentSort}`} className={sub === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub}</NavLink>\n                            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub)}><FaTrashAlt/></SideButton> : null }\n                        </ButtonGroup>\n                    )\n                })\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub === 'user') return true;\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSort = useSelector(state => state.currentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentSort}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={search} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n    currentUser: '',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    extraComments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n    showContext: false,\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n        case 'SET_USER': return {...state, currentUser: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data, extraComments: []};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_EXTRA_COMMENTS': return {...state, extraComments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        case 'SET_SHOW_CONTEXT': return {...state, showContext: data};\n        default: return state;\n    }\n};","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (obj, parent=null) => {        \n    //adding support for more comment loading within replies\n    if (obj.kind === 'more') {        \n        let permalink = parent !== null ? parent.data.permalink.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+\\/([a-zA-Z0-9_]+)\\//)[1] : '';\n        return {\n            kind: 'more',\n            id: obj.data.parent_id.replace('t1_',''),\n            body_html: '',\n            name: '',\n            author: '',\n            replies: [],\n            score: 0,\n            permalink: permalink\n        };\n    }\n    \n    let comment = obj.data;\n    let {body_html, id, name, author, permalink, replies, score, created_utc} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        return parseComment(comment, obj);\n    });\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc};\n}\n\nconst parseLinks = (text) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit users are adjusted\n    text = text.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n    let user = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if (parts[1] === 'user' && parts[2] !== undefined) { user = parts[2]; newSort = ''; }\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl, user};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    let search = searchStr.match(/search=([a-zA-Z0-9% ]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ');\n    \n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentUser}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (url === previousUrl && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(post);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getMoreComments = async (id, fullUrl) => {\n    const state = store.getState();\n    const { extraComments, currentSub, currentPostId } = state;\n    const setExtraComments = (val) => store.dispatch({type: 'SET_EXTRA_COMMENTS', payload: val});\n\n    try {\n        let response = await fetch(`https://www.reddit.com/r/${currentSub}/comments/${currentPostId}/${fullUrl}/${id}.json`);\n        let data = await response.json();\n\n        if (data.error) {\n            console.log('Getting More Comments - Error: ', data.error);\n        } else {\n            let newComments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n            \n            //make sure it doesn't already exist in case it tried to load more twice\n            let parentComment = newComments[0];\n            let check = extraComments.find(obj => obj.id === parentComment.id);\n            if (check === undefined) {\n                let newExtras = [...extraComments, parentComment];\n                setExtraComments(newExtras);\n            }\n        }\n    } catch (error) {\n        console.log('Getting More Comments - URL Error: ', error);\n    }\n}\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl, showContext } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    let context = showContext && permalinkUrl.length > 0 ? 10000 : 0;\n\n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}&context=${context}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink, media_metadata, is_gallery, gallery_data});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    getMoreComments,\n    updatePostDetails\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //show embedded reddit video\n    if (post.url.includes('v.redd.it')) {        \n        let url = `https://www.reddit.com${post.permalink}?ref=share&ref_source=embed`;\n        bodyContent = <PostBody>\n            <blockquote className=\"reddit-card\">\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{post.title}</a>\n            </blockquote>\n        </PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span></PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? bodyContent : null }\n                        <div>\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, getMoreComments } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid red;\n    border-top: 1px solid red;\n    margin-bottom: 0px;\n    transition: border-left 0.5s;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n\n    :hover {\n        border-left: 1px solid #fcc203;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover, & > div:hover {\n        cursor: pointer;\n    }\n\n    & > div {\n        margin-top: 10px;\n        font-size: 1.2em;\n        display: inline-block;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n    const extraComments = useSelector(state => state.extraComments);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n\n    let permalinkId = permalinkUrl.split('/')[1];\n    let permalinkComment = permalinkId === comment.id;\n\n    //test if extra comments have been loaded for this one\n    let extras = extraComments.find(obj => obj.id === comment.id && comment.kind !== 'more');\n    if (extras !== undefined) {                \n        extras = extras.replies;\n    } else {\n        extras = [];\n    }\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (extras.length > 0) {\n        replies = <CommentList comments={extras} author={author}/>;\n    } else if (comment.replies.length > 0) {\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    const getMore = () => {\n        getMoreComments(comment.id, comment.permalink);\n    }\n\n    //dont' currently support getting more top level comments, so don't show anything\n    if (comment.kind === 'more' && comment.permalink.length === 0) return null;\n\n    return (\n        <StyledComment single={single}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{comment.link_title}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            { comment.kind === 'more' ? null : <span style={{color: 'gray'}}> {single ? '' : '|'} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span> }\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }} style={permalinkComment ? {backgroundColor: 'rgba(150,150,0,0.3)'} : {}}></div> }\n            { closed ? null : (\n                <CommentFooter>\n                    { comment.kind !== 'more' ? <a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a> : null }\n                    { single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }\n                    { comment.kind === 'more' ? <div onClick={getMore}>Load More</div> : null }\n                </CommentFooter>) }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;    \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport styled from 'styled-components';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport { parseBodyText } from '../functions/useful';\n\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst StyledComp = styled.div`\n    & > div#mainImageOuter {\n        position: relative;\n    }\n\n    & > div#caption {\n        text-align: center;\n        font-size: 0.9em;\n        margin-bottom: 5px;\n    }\n\n    & > div#thumbnails {\n        display: flex;\n        max-width: 100%;\n        justify-content: center;\n        align-items: center;\n        flex-flow: wrap;\n    }\n\n    & > div#thumbnails > img {\n        margin: 5px;\n    }\n\n    & > div#thumbnails > img:hover {\n        cursor: pointer;\n    }\n\n    & #galleryInner {\n        padding-top: 50%;\n    }\n    \n    & #galleryImgDiv {\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        text-align: center;\n        display: flex;\n        justify-content: center;\n    }\n\n    & #galleryImgDiv a {\n        align-self: center;\n        width: calc(100% - 100px);\n        height: 100%;\n    }\n    \n    & #galleryImgDiv img {\n        max-width: 100%;\n        max-height: 100%;\n        min-height: 100%;\n    }\n\n    & #galleryButtons {\n        position: absolute;\n        top: 50%;\n        width: 100%;\n        display: flex;\n        z-index: 3;\n        justify-content: space-between;\n    }\n    \n    & #galleryButtons > div {\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        background-color: black;\n        opacity: 0.6;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 2em;\n        position: relative;\n    }\n\n    & #galleryButtons > div:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    & #galleryButtons > div:first-child {\n        transform: translate(0,-50%) rotate(90deg);\n        left: -15px;\n    }\n\n    & #galleryButtons > div:last-child {\n        transform: translate(0,-50%) rotate(-90deg);\n        right: -15px;\n    }\n\n    & #galleryButtons > div > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    @media screen and (max-width: 700px) {\n        & #galleryButtons > div:hover {\n            background-color: black;\n        }\n    }\n`;\n\n//function to get the url based on an index, but if that index doesn't exist, it gets the next largest image.\nconst getURL = (arr, index) => {\n    let limit = 6;\n    while (true && limit > 0) {\n        if (arr[index] !== undefined) return parseBodyText(arr[index].u);\n        else index--;\n        limit--;\n    }\n}\n\nconst Gallery = ({data, extraData}) => {\n    let firstId = data ? Object.keys(data)[0] : '';\n    const [id, setId] = useState(firstId);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n    const level4 = useMediaQuery({ maxWidth: 960 });\n    const level5 = useMediaQuery({ maxWidth: 2560 });\n    let index = data ? Object.keys(data).indexOf(id) : 0;\n    let numberOfImages = data ? Object.keys(data).length : 0;\n\n    if (!data) return <p>Post has been removed</p>;\n\n    let url = '';\n    if (level5) url = getURL(data[id].p, 5);\n    if (level4) url = getURL(data[id].p, 4);\n    if (isMobile) url = getURL(data[id].p, 3);\n    let fullUrl = parseBodyText(data[id].s.u);\n\n    let caption = `${index+1}/${numberOfImages}`;\n    let extraDataObj = extraData.items.find(obj => obj.media_id === id);\n    if (extraDataObj !== undefined) {\n        if (extraDataObj.caption !== undefined) caption += ' - Caption: ' + extraDataObj.caption;\n    }\n\n    const onClickThumb = (id) => () => {\n        setId(id);\n    }\n\n    const next = () => {\n        let arr = Object.keys(data);\n        let index = arr.indexOf(id);\n        let next = index+1;\n        if (next >= arr.length) next = 0;\n        let nextId = arr[next];\n        setId(nextId);\n    }\n\n    const previous = () => {\n        let arr = Object.keys(data);\n        let index = arr.indexOf(id);\n        let next = index-1;\n        if (next < 0) next = arr.length-1;\n        let nextId = arr[next];\n        setId(nextId);\n    }\n\n    return (\n        <StyledComp>\n            { caption.length > 0 ? <div id=\"caption\">{ caption }</div> : null }\n            <div id=\"mainImageOuter\">\n                <div id=\"galleryInner\">\n                    <div id=\"galleryButtons\">\n                        <div onClick={previous}><FaChevronDown/></div>\n                        <div onClick={next}><FaChevronDown/></div>\n                    </div>\n                    <LoadingSpinner style={{position: 'absolute', left: 'calc(50% - 25px)', top: 'calc(50% - 50px)', zIndex: '0'}}/>\n                    <div id=\"galleryImgDiv\">\n                        <a key={id} href={fullUrl} target=\"_blank\" rel=\"noopener noreferrer\"><img src={url} alt=\"Gallery Main\"/></a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"thumbnails\">\n            {\n                isMobile ? null : Object.values(data).map((obj, i) => {\n                    return <img key={obj.id+i} src={parseBodyText(obj.p[0].u)} onClick={onClickThumb(obj.id)} alt=\"Thumbnail\"/>\n                })\n            }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Gallery;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport Gallery from './Gallery';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    @media screen and (max-width: 700px) {\n        :hover {\n            background-color: black;\n        }\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const showContext = useSelector(state => state.showContext);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl, showContext]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed, media_metadata, is_gallery, gallery_data} = post;    \n\n    //check if post is a link to another post and make sure it goes there locally and not on a new page\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                { bodyTag }\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <span><a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> - <a href={`#/${currentSub}/comments/${currentPostId}/${permalinkUrl}/?context=10000`}>Show Context</a></span> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data) => {\n    body = parseLinks(body);\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    if (is_gallery) {\n        return <PostBody className=\"postDivBody\"><Gallery data={media_metadata} extraData={gallery_data}/></PostBody>\n    }\n\n    if (url.includes('v.redd.it')) {\n        let url = `https://www.reddit.com${permalink}?ref=share&ref_source=embed`;\n        bodyTag = <PostBody className=\"postDivBody\">\n                    <blockquote className=\"reddit-card\">\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n                    </blockquote>\n                  </PostBody>\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\n\nimport { getPostList, getComments, parseURL, parseSearch } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const currentContext = useSelector(state => state.showContext);\n    const setContext = (val) => dispatch({type: 'SET_SHOW_CONTEXT', payload: val});\n\n    const currentUser = useSelector(state => state.currentUser);\n    const setCurrentUser = (val) => dispatch({type: 'SET_USER', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl, user} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    let showContext = location.search === '?context=10000';\n\n    //load saved posts from local storage\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n    useEffect(() => {\n        let storedSaves = localStorage.getItem('saved');\n        storedSaves = storedSaves ? JSON.parse(storedSaves) : [];\n        setSaved(storedSaves);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);    \n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n        if (showContext !== currentContext) setContext(showContext);\n        if (user.length > 0 && user !== currentUser) setCurrentUser(user);\n        \n        //if moving from user list to post to post list, then need to make sure user is reset otherwise still displays user list\n        if (user.length === 0 && newSort.length > 0 && postId.length === 0) setCurrentUser('');\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        if (currentSearchForSubs) heading = `Searching: ${currentSearch}`;\n        if (currentSub === 'user') heading = `${currentUser}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <div style={{height: '100%', overflow: 'hidden'}}>\n                <TopMenu onBackClick={onBackClick}/>\n                <div style={{marginTop: '50px'}}></div>\n                { getMainPage() }\n            </div>\n        );\n    } else {\n        return (\n            <div style={{display: 'flex', height: '100%'}}>\n                <div>\n                    <SideMenu/>\n                </div>\n                <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                    { getMainPage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}