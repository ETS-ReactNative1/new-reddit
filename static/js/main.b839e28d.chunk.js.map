{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","checkIfSubbed","subs","currentSub","length","includes","SubList","dispatch","useDispatch","useSelector","state","currentSort","setSubs","val","type","payload","useState","editMode","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","onDeleteSub","sub","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","to","className","onClick","map","key","style","textTransform","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","display","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","onKeyPress","width","saved","currentPostId","obj","id","url","fontSize","title","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","saveMenuOpen","Fragment","SaveList","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","extraComments","noComments","searchForSubs","previousUrl","permalinkUrl","store","createStore","action","data","parseComment","parent","kind","permalink","match","parent_id","replace","body_html","name","author","replies","score","comment","created_utc","parseBodyText","children","parseLinks","text","redditMatches","forEach","parseBool","str","getMySubs","prepend","join","getPostList","a","loadMore","force","getState","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","body","selftext_html","num_comments","stickied","thumbnail","media_embed","noMore","getMoreComments","fullUrl","setExtraComments","newComments","parentComment","undefined","find","newExtras","getComments","setComments","setNoComments","setPostDetails","PostTitle","PostTextGroup","PostDetails","PostExpand","StyledPostLink","PostThumbnail","PostComments","PostBody","React","memo","onClickLink","expanded","setExpanded","dateString","formatDistanceStrict","Date","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","openBtn","maxWidth","href","rel","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","toLowerCase","StyledCommentList","CommentList","StyledComment","single","CommentClose","span","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","extras","pointString","color","LoadingSpinner","PostList","textAlign","hide","position","top","hasMore","margin","marginBottom","dataLength","next","loader","scrollableTarget","scrollThreshold","StyledPost","ScrollButton","SimpleButton","parsePostBody","bodyTag","content","Post","isMobile","useMediaQuery","updatePostDetails","window","scrollTo","urlMatches","localUrl","shortUrl","substr","isSaved","urlTag","newSaved","link","commentDiv","document","querySelector","i","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","onReload","StyledSideMenu","SavedButton","SideMenu","showSaved","setShowSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","parts","newSort","postId","userSort","parseURL","pathname","searchStr","parseSearch","storedSaves","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b839e28d.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                subs.map(sub => {\n                    return (\n                        <ButtonGroup key={'sub-'+sub}>\n                            <NavLink to={`/${sub}/${currentSort}`} className={sub === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub}</NavLink>\n                            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub)}><FaTrashAlt/></SideButton> : null }\n                        </ButtonGroup>\n                    )\n                })\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub === 'user') return true;\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSort = useSelector(state => state.currentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentSort}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={search} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    extraComments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data, extraComments: []};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_EXTRA_COMMENTS': return {...state, extraComments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        default: return state;\n    }\n};","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (obj, parent=null) => {        \n    //adding support for more comment loading within replies\n    if (obj.kind === 'more') {        \n        let permalink = parent !== null ? parent.data.permalink.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+\\/([a-zA-Z0-9_]+)\\//)[1] : '';\n        return {\n            kind: 'more',\n            id: obj.data.parent_id.replace('t1_',''),\n            body_html: '',\n            name: '',\n            author: '',\n            replies: [],\n            score: 0,\n            permalink: permalink\n        };\n    }\n    \n    let comment = obj.data;\n    let {body_html, id, name, author, permalink, replies, score, created_utc} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        return parseComment(comment, obj);\n    });\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc};\n}\n\nconst parseLinks = (text) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit users are adjusted\n    text = text.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    let search = searchStr.match(/search=([a-zA-Z0-9% ]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ');\n    \n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentSort}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (url === previousUrl && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(post);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getMoreComments = async (id, fullUrl) => {\n    const state = store.getState();\n    const { extraComments, currentSub, currentPostId } = state;\n    const setExtraComments = (val) => store.dispatch({type: 'SET_EXTRA_COMMENTS', payload: val});\n\n    try {\n        let response = await fetch(`https://www.reddit.com/r/${currentSub}/comments/${currentPostId}/${fullUrl}/${id}.json`);\n        let data = await response.json();\n\n        if (data.error) {\n            console.log('Getting More Comments - Error: ', data.error);\n        } else {\n            let newComments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n            \n            //make sure it doesn't already exist in case it tried to load more twice\n            let parentComment = newComments[0];\n            let check = extraComments.find(obj => obj.id === parentComment.id);\n            if (check === undefined) {\n                let newExtras = [...extraComments, parentComment];\n                setExtraComments(newExtras);\n            }\n        }\n    } catch (error) {\n        console.log('Getting More Comments - URL Error: ', error);\n    }\n}\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    \n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, author, created_utc, permalink} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    getMoreComments,\n    updatePostDetails\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span></PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? bodyContent : null }\n                        <div>\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, getMoreComments } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid red;\n    border-top: 1px solid red;\n    margin-bottom: 0px;\n    transition: border-left 0.5s;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n\n    :hover {\n        border-left: 1px solid #fcc203;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover, & > div:hover {\n        cursor: pointer;\n    }\n\n    & > div {\n        margin-top: 10px;\n        font-size: 1.2em;\n        display: inline-block;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n    const extraComments = useSelector(state => state.extraComments);\n\n    //test if extra comments have been loaded for this one\n    let extras = extraComments.find(obj => obj.id === comment.id && comment.kind !== 'more');\n    if (extras !== undefined) {                \n        extras = extras.replies;\n    } else {\n        extras = [];\n    }\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (extras.length > 0) {\n        replies = <CommentList comments={extras} author={author}/>;\n    } else if (comment.replies.length > 0) {\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    const getMore = () => {\n        getMoreComments(comment.id, comment.permalink);\n    }\n\n    //dont' currently support getting more top level comments, so don't show anything\n    if (comment.kind === 'more' && comment.permalink.length === 0) return null;\n\n    return (\n        <StyledComment single={single}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{comment.link_title}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            { comment.kind === 'more' ? null : <span style={{color: 'gray'}}> {single ? '' : '|'} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span> }\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }}></div> }\n            { closed ? null : (\n                <CommentFooter>\n                    { comment.kind !== 'more' ? <a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a> : null }\n                    { single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }\n                    { comment.kind === 'more' ? <div onClick={getMore}>Load More</div> : null }\n                </CommentFooter>) }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;    \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed} = post;\n\n    //check if post is a link to another post and make sure it goes there locally and not on a new page\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                { bodyTag }\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media, media_embed) => {\n    body = parseLinks(body);\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\n\nimport { getPostList, getComments, parseURL, parseSearch } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    //load saved posts from local storage\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n    useEffect(() => {\n        let storedSaves = localStorage.getItem('saved');\n        storedSaves = storedSaves ? JSON.parse(storedSaves) : [];\n        setSaved(storedSaves);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);    \n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        if (currentSearchForSubs) heading = `Searching: ${currentSearch}`;\n        if (currentSub === 'user') heading = `${currentSort}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <div style={{height: '100%', overflow: 'hidden'}}>\n                <TopMenu onBackClick={onBackClick}/>\n                <div style={{marginTop: '50px'}}></div>\n                { getMainPage() }\n            </div>\n        );\n    } else {\n        return (\n            <div style={{display: 'flex', height: '100%'}}>\n                <div>\n                    <SideMenu/>\n                </div>\n                <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                    { getMainPage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}