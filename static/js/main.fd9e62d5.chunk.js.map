{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/Download.js","components/Upload.js","components/Settings.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/Styled/Flair.js","components/Spoiler.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Gallery.js","components/ErrorBoundary.js","components/Crosspost.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","CustomSub","sub","currentSub","currentSort","onDeleteSub","editMode","key","id","className","style","position","top","to","textTransform","onClick","checkIfSubbed","subs","length","includes","SubList","dispatch","useDispatch","useSelector","state","setSubs","val","type","payload","useState","setEditMode","newSub","setNewSub","newSubArr","filter","subName","addSubToStorage","arr","displaySubs","map","list","setList","data","handle","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","currentUser","display","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","decodeURI","onKeyPress","width","saved","currentPostId","obj","url","fontSize","title","StyledComp","Download","filename","format","Date","dataStr","encodeURIComponent","JSON","stringify","link","document","createElement","setAttribute","click","Upload","onUpload","importData","setImportData","fileName","setFileName","fileInput","useRef","uniqueId","Math","floor","random","file","files","undefined","match","reader","FileReader","name","onload","text","result","parse","readAsText","ref","htmlFor","current","Settings","onUploadSubs","valid","Array","isArray","i","newSubs","forEach","find","toLowerCase","localStorage","setItem","alert","onUploadSaved","newSaved","savedItem","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","saveMenuOpen","settingsMenuOpen","Fragment","SaveList","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","extraComments","noComments","searchForSubs","previousUrl","permalinkUrl","showContext","reducer","action","store","createStore","storedSubs","getItem","storedSaves","getFromLocalStorage","applyMiddleware","getState","next","parseComment","parent","kind","permalink","parent_id","replace","body_html","author","replies","score","comment","created_utc","stickied","parseBodyText","children","hasContext","parseLinks","body","redditMatches","aTagMatches","a","hrefMatch","href","aText","imageText","imgMatch","parseFlair","flair","trim","parseBool","str","getMySubs","prepend","join","getPostList","loadMore","force","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","selftext_html","num_comments","thumbnail","media_embed","spoiler","link_flair_text","link_flair_text_color","link_flair_background_color","crosspost_parent_list","noMore","getMoreComments","fullUrl","setExtraComments","newComments","parentComment","newExtras","getComments","setComments","setNoComments","setPostDetails","context","media_metadata","is_gallery","gallery_data","getLocalUrl","urlMatches","localUrl","PostTitle","PostTextGroup","PostDetails","PostExpand","Flair","span","color","backgroundColor","Spoiler","showSpoiler","setShowSpoiler","StyledPostLink","PostThumbnail","PostComments","PostBody","SpoilerTag","React","memo","onClickLink","onClickFlair","expanded","setExpanded","dateString","formatDistanceStrict","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","rel","openBtn","flairColor","flairBgColor","maxWidth","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","StyledCommentList","CommentList","StyledComment","single","CommentClose","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","permalinkComment","extras","pointString","LoadingSpinner","PostList","textAlign","hide","hasMore","sorting","margin","marginBottom","dataLength","loader","scrollableTarget","scrollThreshold","getURL","index","limit","u","Gallery","extraData","firstId","items","media_id","setId","isMobile","useMediaQuery","level4","level5","numberOfImages","showSpinner","setShowSpinner","sortedData","item","Object","keys","indexOf","p","s","caption","extraDataObj","onClickThumb","prev","prevId","nextId","left","zIndex","onLoad","dataObj","StyledError","ErrorBoundary","resetError","setState","hasError","errorInfo","this","message","Component","Crosspost","bodyTag","parsePostBody","StyledPost","ScrollButton","SimpleButton","content","Post","useEffect","updatePostDetails","window","scrollTo","shortUrl","substr","isSaved","urlTag","commentDiv","querySelector","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","subHeading","onReload","decodeURIComponent","StyledSideMenu","SavedButton","TopButtons","SideMenu","showSaved","setShowSaved","showSettings","setShowSettings","onClickHideSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","currentContext","setCurrentUser","parts","newSort","postId","userSort","user","parseURL","pathname","searchStr","parseSearch","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setContext","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd9e62d5.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > div {\n        flex-grow: 1;\n    }\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n\n    & .handle {\n        width: 40px;\n        min-width: 40px;\n        height: 31px;\n        border-top: 1px solid gray;\n        border-right: 1px solid gray;\n    }\n\n    & .handle:hover {\n        cursor: pointer;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n        overflow: hidden;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n\n        & a:hover {\n            background-color: black;\n        }\n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n\n    @media screen and (max-device-width: 600px){\n        &:hover {\n            background-color: black;\n        } \n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { TiArrowUnsorted } from 'react-icons/ti';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ReactSortable } from 'react-sortablejs';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(subs.length === 0 ? true : false);\n    const [newSub, setNewSub] = useState('');\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n    }\n\n    const reorder = (data) => {\n        if (data.length === 0) return;\n        let newSubArr = data.map(sub => sub.id);\n        setSubs(newSubArr);\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    let displaySubs = subs.map(sub => ({id: sub}));\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                editMode \n                    ? ( <ReactSortable list={displaySubs} setList={reorder} handle=\".handle\">\n                            { displaySubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>) }\n                        </ReactSortable> ) \n                    : displaySubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>)\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst CustomSub = ({sub, currentSub, currentSort, onDeleteSub, editMode}) => {\n    return (\n        <ButtonGroup key={'sub-'+sub.id}>\n            { editMode ? <div className=\"handle\"><TiArrowUnsorted style={{position: 'relative', top: '8px'}}/></div> : null }\n            <NavLink to={`/${sub.id}/${currentSort}`} className={sub.id === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub.id}</NavLink>\n            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub.id)}><FaTrashAlt/></SideButton> : null }\n        </ButtonGroup>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub === 'user') return true;\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top', 'comments'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const currentUser = useSelector(state => state.currentUser);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentUser}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        // if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={decodeURI(search)} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import React from 'react';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\n\nconst StyledComp = styled.button`\n    background-color: black;\n    color: white;\n    width: 150px;\n    border-radius: 5px;\n    padding: 5px;\n    margin: 5px;\n    display: inline-block;\n    border: 1px solid gray;\n    font-size: 1em;\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst Download = ({data, filename=`Data - ${format(new Date(),'yyyy-MM-dd')}.json`}) => {\n    const downloadJson = () => {\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data, null, 2));\n\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", dataStr);\n        link.setAttribute(\"download\", filename);\n        link.click();\n    }\n\n    return (\n        <StyledComp onClick={downloadJson}>Download</StyledComp>\n    );\n}\n\nexport default Download;","import React from 'react';\nimport { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    display: inline-flex;\n    margin: 5px;\n    color: white;\n\n    & > input {\n        display: none;\n    }\n\n    & > #filename {\n        color: white;\n        width: 150px;\n        height: 28px;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        display: inline-block;\n        padding: 5px;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n    }\n\n    & > #uploadButton {\n        display: inline-block;\n        height: 28px;\n        padding: 5px 10px;\n        background-color: gray;\n        border-radius: 0px 5px 5px 0px;\n    }\n\n    & > #uploadButton:hover {\n        cursor: pointer;\n        filter: brightness(75%);\n    }\n\n    & > #filename:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Upload = ({onUpload=()=>{}}) => {\n    const [importData, setImportData] = useState(null);\n    const [fileName, setFileName] = useState('Choose a File');\n    const fileInput = useRef(null);\n\n    const onFileChange = (e) => {\n        const file = e.target.files[0];\n        if (file === undefined) return;\n\n        if (file.type.match('application/json')) {\n            const reader = new FileReader();\n            setFileName(file.name);\n\n            reader.onload = (e) => {\n                let text = reader.result;\n                let obj = JSON.parse(text);\n                \n                setImportData(obj);\n            }\n\n            reader.readAsText(file);\n        } else {\n            setImportData(null);\n            setFileName('Incorrect File Type');\n        }\n    }\n\n    const onImport = () => {\n        if (importData) {\n            setFileName('File Uploaded')\n            onUpload(importData);\n            setImportData(null);\n            fileInput.current.value = '';\n        } else {\n            setFileName('Choose a File');\n        }\n    }\n\n    const uniqueId = 'fileUpload-' + Math.floor(Math.random() * 100);\n\n    return (\n        <StyledComp>\n            <input type='file' id={uniqueId} onChange={onFileChange} ref={fileInput}/>\n            <label id='filename' htmlFor={uniqueId}>{fileName}</label>\n            <div id='uploadButton' onClick={onImport}>Upload</div>\n        </StyledComp>\n    );\n}\n\nexport default Upload;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Download from './Download';\nimport Upload from './Upload';\n\nconst StyledComp = styled.div`\n    text-align: center;\n\n    & > #group {\n        margin-top: 20px;\n    }\n`;\n\nconst Settings = () => {\n    const dispatch = useDispatch();\n    const saved = useSelector(state => state.saved);\n    const subs = useSelector(state => state.subs);\n\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    const onUploadSubs = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSubs = [...subs];\n        data.forEach(sub => {\n            let old = subs.find(name => name.toLowerCase() === sub.toLowerCase());\n            if (old !== undefined) return;\n            newSubs.push(sub);\n        });\n\n        //set to state and save to localstorage\n        setSubs(newSubs);\n        localStorage.setItem('subs', JSON.stringify(newSubs));\n    }\n    \n    const onUploadSaved = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            let obj = data[i];\n            if (typeof obj !== 'object') { valid = false; break; }\n            if (!obj.id || !obj.title || !obj.sub || !obj.url) { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSaved = [...saved];\n        data.forEach(savedItem => {\n            if (saved.find((obj) => obj.id === savedItem.id)) return;\n            newSaved.push(savedItem);\n        });\n\n        //set to state and save to localstorage\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    const onUploadBoth = (data) => {\n        if (data.subs !== undefined) onUploadSubs(data.subs);\n        if (data.saved !== undefined) onUploadSaved(data.saved);\n    }\n\n    return (\n        <StyledComp>\n            <h3>Settings</h3>\n            <p>Download and Upload the list of subs and saved posts.</p>\n            <div id=\"group\">\n                <div>Sub List</div>\n                <Upload onUpload={onUploadSubs}/>\n                <Download data={subs} filename='Reddit Sub List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Save List</div>\n                <Upload onUpload={onUploadSaved}/>\n                <Download data={saved} filename='Reddit Saved List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Both</div>\n                <Upload onUpload={onUploadBoth}/>\n                <Download data={{subs: subs, saved: saved}} filename='Reddit Backup.json'/>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Settings;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MdSettings } from 'react-icons/md';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2),  & > div:nth-last-child(3){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n\n    & > div:last-child {\n        font-size: 1.4em;\n        height: 34px;\n    }\n\n    & > div:last-child > svg {\n        position: relative;\n        top: -2px;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const settingsMenuOpen = useSelector(state => state.settingsMenuOpen);\n    const onClickSettings = () => settingsMenuOpen ? dispatch({type: 'CLOSE_SETTINGS'}) : dispatch({type: 'OPEN_SETTINGS'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n                <MenuButton onClick={onClickSettings} selected={settingsMenuOpen}><MdSettings/></MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n            { settingsMenuOpen ? <Dropdown right={true}><Settings/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n    currentUser: '',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    extraComments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n    settingsMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n    showContext: false,\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n        case 'SET_USER': return {...state, currentUser: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data, extraComments: []};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, settingsMenuOpen: false, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'OPEN_SETTINGS': return {...state, settingsMenuOpen: true, saveMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SETTINGS': return {...state, settingsMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_EXTRA_COMMENTS': return {...state, extraComments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        case 'SET_SHOW_CONTEXT': return {...state, showContext: data};\n        default: return state;\n    }\n};","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducers';\n\nconst localStorageMiddleware = ({getState}) => {\n    return (next) => (action) => {\n        const result = next(action);\n        let state = getState();\n\n        if (action.type === 'SET_SUBS') {\n            let subs = state.subs;\n            localStorage.setItem('subs', JSON.stringify(subs));\n        } else if (action.type === 'SET_SAVED') {\n            let saved = state.saved;\n            localStorage.setItem('saved', JSON.stringify(saved));\n        }\n\n        return result;\n    }\n};\n\nconst getFromLocalStorage = () => {\n    let storedSubs = localStorage.getItem('subs');\n    if (storedSubs !== undefined) storedSubs = JSON.parse(storedSubs);\n    let storedSaves = localStorage.getItem('saved');\n    if (storedSaves !== undefined) storedSaves = JSON.parse(storedSaves);\n    let state = reducer();\n\n    if (!storedSubs) storedSubs = [];\n    if (!storedSaves) storedSaves = [];\n\n    return {\n        ...state,\n        subs: storedSubs,\n        saved: storedSaves\n    }\n}\n\nconst store = createStore(reducer, getFromLocalStorage(), applyMiddleware(localStorageMiddleware));\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (obj, parent=null) => {        \n    //adding support for more comment loading within replies\n    if (obj.kind === 'more') {        \n        let permalink = parent !== null ? parent.data.permalink.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+\\/([a-zA-Z0-9_]+)\\//)[1] : '';\n        return {\n            kind: 'more',\n            id: obj.data.parent_id.replace('t1_',''),\n            body_html: '',\n            name: '',\n            author: '',\n            replies: [],\n            score: 0,\n            permalink: permalink\n        };\n    }\n    \n    let comment = obj.data;\n    let {body_html, id, name, author, permalink, replies, score, created_utc, parent_id, stickied} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        return parseComment(comment, obj);\n    });\n\n    const hasContext = !parent_id.includes('t3_');\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc, hasContext, stickied};\n}\n\nconst parseLinks = (text, body=false) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //but links to other reddit subs or users can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/u/g, 'href=\"#/user');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    if (body) {\n        //Check for image links and replace with image (only check paragraphs to ignore inline image links)\n        let aTagMatches = text.match(/<p><a\\b[^>]*>(.*?)<\\/a>( ?)<\\/p>/g);\n        if (aTagMatches) {\n            aTagMatches.forEach(a => {\n                //get full href\n                let hrefMatch = a.match(/href=\"(.[^\"]+)\"/);\n                if (hrefMatch === undefined || hrefMatch.length < 2) return;\n                let href = parseBodyText(hrefMatch[1]);\n    \n                //check <a> tag description if not the same as url\n                let aText = a.match(/<p><a\\b[^>]*>(.*?)<\\/a><\\/p>/);\n                let imageText = '';\n                if (aText && aText.length > 1) {\n                    imageText = parseBodyText(aText[1]);\n                    if (imageText === href) imageText = '';\n                }\n        \n                //basic check if link is an image link\n                let imgMatch = href.match(/\\.jpg|\\.bmp|\\.jpeg|\\.png|\\.gif/);\n        \n                //if it is, replace with img tag\n                if (imgMatch && imgMatch.length > 0) {\n                    text = text.replace(a, `<p class=\"bodyImage\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"${href}\"><img src=\"${href}\"/><span>${imageText}</span></a></p>`);\n                }\n            });\n        }\n    }\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseFlair = (flair) => {\n    if (flair === undefined || flair === null) return '';\n\n    //filter out flair logos\n    flair = flair.length > 0 ? flair.replace(/:[a-zA-Z0-9_-]+:/g, '') : '';\n    flair = flair.trim();\n    flair = parseBodyText(flair);\n    return flair;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n    let user = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] === 'comments' && parts[3] === undefined) newSort = 'comments';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if (parts[1] === 'user' && parts[2] !== undefined) { user = parts[2]; newSort = ''; }\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl, user};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    searchStr = searchStr.replace('&amp;', '%26'); //if search string contains &, replace with %26 so the regex still catches it\n    let search = searchStr.match(/search=([^&]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ').replace(/%22/g, '\"');\n\n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    storedSubs = storedSubs.filter(sub => (!sub.includes('/'))); //filter items with / in, such as user links\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentUser}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (decodeURI(url) === decodeURI(previousUrl) && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        // console.log('Fetching data with url: '+url);\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(post);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed,\n                        spoiler: data.spoiler,\n                        link_flair_text: data.link_flair_text,\n                        link_flair_text_color: data.link_flair_text_color,\n                        link_flair_background_color: data.link_flair_background_color,\n                        crosspost_parent_list: data.crosspost_parent_list\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getMoreComments = async (id, fullUrl) => {\n    const state = store.getState();\n    const { extraComments, currentSub, currentPostId } = state;\n    const setExtraComments = (val) => store.dispatch({type: 'SET_EXTRA_COMMENTS', payload: val});\n\n    try {\n        let response = await fetch(`https://www.reddit.com/r/${currentSub}/comments/${currentPostId}/${fullUrl}/${id}.json`);\n        let data = await response.json();\n\n        if (data.error) {\n            console.log('Getting More Comments - Error: ', data.error);\n        } else {\n            let newComments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n            \n            //make sure it doesn't already exist in case it tried to load more twice\n            let parentComment = newComments[0];\n            let check = extraComments.find(obj => obj.id === parentComment.id);\n            if (check === undefined) {\n                let newExtras = [...extraComments, parentComment];\n                setExtraComments(newExtras);\n            }\n        }\n    } catch (error) {\n        console.log('Getting More Comments - URL Error: ', error);\n    }\n}\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl, showContext } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    let context = showContext && permalinkUrl.length > 0 ? 10000 : 3;\n\n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}&context=${context}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink, spoiler, crosspost_parent_list} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink, media_metadata, is_gallery, gallery_data, spoiler, crosspost_parent_list});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nconst getLocalUrl = (url, currentSub, currentPostId) => {\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n\n    return localUrl;\n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseFlair,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    getMoreComments,\n    updatePostDetails,\n    getLocalUrl\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    & > span:last-child {\n        word-break: break-word;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import styled from 'styled-components';\n\nconst Flair = styled.span`\n    margin-right: 5px;\n    padding: 1px 3px;\n    color: ${props => props.color === 'light' ? 'white' : 'black'};\n    background-color: ${props => props.backgroundColor};\n    cursor: pointer;\n`;\n\nexport default Flair;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border-bottom: 1px solid #545452;\n    margin-bottom: 5px;\n    padding: 30px;\n    background-color: #545452;\n    text-align: center;\n\n    & > span {\n        border: 1px solid white;\n        border-radius: 5px;\n        padding: 10px;\n    }\n\n    & > span:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Spoiler = ({children, spoiler}) => {\n    const [showSpoiler, setShowSpoiler] = useState(false);\n\n    const onClickShow = () => {\n        setShowSpoiler(true);\n    }\n\n    if (spoiler && !showSpoiler) return <StyledComp><span onClick={onClickShow}>Show Spoiler</span></StyledComp>\n    else return <div>{children}</div>\n}\n\nexport default Spoiler;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, parseBodyText, parseFlair } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\nimport Flair from './Styled/Flair';\nimport Spoiler from './Spoiler';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    p.bodyImage {\n        max-width: fit-content;\n\n        & img {\n            max-width: 100%;\n        }\n    \n        & span {\n            display: block;\n            font-size: 0.8em;\n            color: #AAA;\n            text-align: center;\n        }\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst SpoilerTag = styled.span`\n    background-color: red;\n    margin-right: 10px;\n    font-weight: bold;\n    padding: 2px;\n    text-transform: uppercase;\n    font-size: 0.8em;\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort, onClickFlair=()=>{} }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body, true);\n    post.title = parseBodyText(post.title);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //show embedded reddit video\n    if (post.url.includes('v.redd.it')) {        \n        let url = `https://www.reddit.com${post.permalink}?ref=share&ref_source=embed`;\n        bodyContent = <PostBody>\n            <blockquote className=\"reddit-card\">\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{post.title}</a>\n            </blockquote>\n        </PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    //get flair\n    let flair = parseFlair(post.link_flair_text);\n    let flairColor = post.link_flair_text_color;\n    let flairBgColor = post.link_flair_background_color;\n    if (flairBgColor.length === 0) {\n        flairBgColor = 'white';\n        flairColor = 'black';\n    }\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle>\n                            { flair.length > 0 ? <Flair color={flairColor} backgroundColor={flairBgColor} onClick={onClickFlair(post.link_flair_text)}>{flair}</Flair> : null }\n                            <span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span>\n                        </PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <Spoiler spoiler={post.spoiler}>{bodyContent}</Spoiler> : null }\n                        <div>\n                            { post.spoiler ? <SpoilerTag>Spoiler</SpoilerTag> : null }\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, getMoreComments, parseBodyText } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-top: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    margin-bottom: 0px;\n    transition: border-left 0.5s;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n\n    :hover {\n        border-left: 1px solid #fcc203;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover, & > div:hover {\n        cursor: pointer;\n    }\n\n    & > div {\n        margin-top: 10px;\n        font-size: 1.2em;\n        display: inline-block;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n    const extraComments = useSelector(state => state.extraComments);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const currentSub = useSelector(state => state.currentSub);\n\n    let permalinkId = permalinkUrl.split('/')[1];\n    let permalinkComment = permalinkId === comment.id;\n\n    //test if extra comments have been loaded for this one\n    let extras = extraComments.find(obj => obj.id === comment.id && comment.kind !== 'more');\n    if (extras !== undefined) {                \n        extras = extras.replies;\n    } else {\n        extras = [];\n    }\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (extras.length > 0) {\n        replies = <CommentList comments={extras} author={author}/>;\n    } else if (comment.replies.length > 0) {\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    const getMore = () => {\n        getMoreComments(comment.id, comment.permalink);\n    }\n\n    //dont' currently support getting more top level comments, so don't show anything\n    if (comment.kind === 'more' && comment.permalink.length === 0) return null;\n\n    return (\n        <StyledComment single={single} stickied={comment.stickied}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{parseBodyText(comment.link_title)}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            { comment.kind === 'more' ? null : <span style={{color: 'gray'}}> {single ? '' : '|'} {single && currentSub !== 'user' ? comment.author+' | ' : ''} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span> }\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }} style={permalinkComment ? {backgroundColor: 'rgba(150,150,0,0.3)'} : {}}></div> }\n            { closed ? null : (\n                <CommentFooter>\n                    { comment.kind !== 'more' ? <a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a> : null }\n                    { single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }\n                    { comment.kind === 'more' ? <div onClick={getMore}>Load More</div> : null }\n                </CommentFooter>) }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const history = useHistory();\n\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSearch = useSelector(state => state.currentSearch);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;  \n\n    const onClickFlair = (flair) => () => {\n        //if already searching for this flair, don't need to do anything\n        if (decodeURI(currentSearch) === `flair_name:\"${flair}\"`) return;\n        \n        //base flair sorting on current post sort. I user is looking at new posts, search should use new, otherwise use top (relevant not needed for flair searching)\n        let sorting = currentSort === 'new' ? 'new' : 'top';\n        history.push(`/${currentSub}/${currentSort}?search=${`flair_name:\"${flair}\"`}&searchSort=${sorting}&searchSub=${true}&searchForSubs=${false}`);\n    }  \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport styled from 'styled-components';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport { parseBodyText } from '../functions/useful';\n\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst StyledComp = styled.div`\n    & > div#mainImageOuter {\n        position: relative;\n    }\n\n    & > div#caption {\n        text-align: center;\n        font-size: 0.9em;\n        margin-bottom: 5px;\n    }\n\n    & > div#thumbnails {\n        display: flex;\n        max-width: 100%;\n        justify-content: center;\n        align-items: center;\n        flex-flow: wrap;\n    }\n\n    & > div#thumbnails > img {\n        margin: 5px;\n        user-select: none;\n    }\n\n    & > div#thumbnails > img:hover {\n        cursor: pointer;\n    }\n\n    & > div#thumbnails > img.selected {\n        border: 1px solid red;\n    }\n\n    & #galleryInner {\n        padding-top: 50%;\n    }\n    \n    & #galleryImgDiv {\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        text-align: center;\n        display: flex;\n        justify-content: center;\n    }\n\n    & #galleryImgDiv a {\n        align-self: center;\n        width: calc(100% - 100px);\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    & #galleryImgDiv img {\n        max-width: 100%;\n        max-height: 100%;\n        user-select: none;\n    }\n\n    & #galleryBack, & #galleryForward {\n        position: absolute;\n        top: 50%;\n        z-index: 3;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        background-color: black;\n        opacity: 0.6;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 2em;\n    }\n\n    & #galleryBack:hover, & #galleryForward:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    & #galleryBack {\n        transform: translate(0,-50%) rotate(90deg);\n        left: -15px;\n    }\n\n    & #galleryForward {\n        transform: translate(0,-50%) rotate(-90deg);\n        right: -15px;\n    }\n\n    & #galleryBack > svg, & #galleryForward > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    @media screen and (max-width: 700px) {\n        & #galleryBack:hover, & #galleryForward:hover {\n            background-color: black;\n        }\n    }\n`;\n\n//function to get the url based on an index, but if that index doesn't exist, it gets the next largest image.\nconst getURL = (arr, index) => {\n    let limit = 6;\n    while (true && limit > 0) {\n        if (arr[index] !== undefined) return parseBodyText(arr[index].u);\n        else index--;\n        limit--;\n    }\n}\n\nconst Gallery = ({data, extraData}) => {\n    let firstId = extraData && extraData.items.length > 0 ? extraData.items[0].media_id : '';\n    const [id, setId] = useState(firstId);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n    const level4 = useMediaQuery({ maxWidth: 960 });\n    const level5 = useMediaQuery({ maxWidth: 2560 });\n    let numberOfImages = extraData.items ? extraData.items.length : 0;\n    const [showSpinner, setShowSpinner] = useState(true);\n\n    if (!data) return <p>Post has been removed</p>;\n\n    let sortedData = {};\n    extraData.items.forEach(item => sortedData[item.media_id] = data[item.media_id]);\n    let index = Object.keys(sortedData).indexOf(id);\n\n    let url = '';\n    if (level5) url = getURL(data[id].p, 5);\n    if (level4) url = getURL(data[id].p, 4);\n    if (isMobile) url = getURL(data[id].p, 3);\n    let fullUrl = parseBodyText(data[id].s.u);\n\n    let caption = `${index+1}/${numberOfImages}`;\n    let extraDataObj = extraData.items.find(obj => obj.media_id === id);\n    if (extraDataObj !== undefined) {\n        if (extraDataObj.caption !== undefined) caption += ' - Caption: ' + extraDataObj.caption;\n    }\n\n    const onClickThumb = (id) => () => {\n        setId(id);\n        setShowSpinner(true);\n    }\n\n    const next = () => {\n        let arr = Object.keys(sortedData);\n        let index = arr.indexOf(id);\n        let next = index+1;\n        if (next >= arr.length) next = 0;\n        let nextId = arr[next];\n        setId(nextId);\n        setShowSpinner(true);\n    }\n\n    const previous = () => {\n        let arr = Object.keys(sortedData);\n        let index = arr.indexOf(id);\n        let prev = index-1;\n        if (prev < 0) prev = arr.length-1;\n        let prevId = arr[prev];\n        setId(prevId);\n        setShowSpinner(true);\n    }\n\n    const onImageLoad = () => {\n        setShowSpinner(false);\n    }\n\n    return (\n        <StyledComp>\n            { caption.length > 0 ? <div id=\"caption\">{ caption }</div> : null }\n            <div id=\"mainImageOuter\">\n                <div id=\"galleryInner\">\n                    <div onClick={previous} id=\"galleryBack\"><FaChevronDown/></div>\n                    <div onClick={next} id=\"galleryForward\"><FaChevronDown/></div>\n                    { showSpinner ? <LoadingSpinner style={{position: 'absolute', left: 'calc(50% - 25px)', top: 'calc(50% - 50px)', zIndex: '0'}}/> : null }\n                    <div id=\"galleryImgDiv\">\n                        <a key={id} href={fullUrl} target=\"_blank\" rel=\"noopener noreferrer\"><img src={url} alt=\"Gallery Main\" onLoad={onImageLoad}/></a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"thumbnails\">\n            {\n                isMobile ? null : extraData.items.map((obj,i) => {\n                    let dataObj = data[obj.media_id];\n                    return <img key={obj.id} src={parseBodyText(dataObj.p[0].u)} onClick={onClickThumb(obj.media_id)} alt=\"Thumbnail\" className={id === obj.media_id ? 'selected' : ''}/>\n                })\n            }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Gallery;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledError = styled.div`\n    margin: 10px;\n    text-align: center;\n\n    h2 {\n        margin-top: 20px;\n    }\n\n    button {\n        border: 1px solid red;\n        background-color: black;\n        color: white;\n        font-size: 1.5em;\n        margin-top: 20px;\n    }\n`;\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({error: error.message});\n  }\n\n  resetError = () => {\n        this.setState({hasError: false});\n        this.props.history.push('/');\n    }\n\n  render() {\n    if (this.state.hasError) {\n        return (\n            <StyledError>\n                { this.props.history !== undefined ? <h2>Sorry, something went wrong.</h2> : <h2>This Component Could Not Be Loaded</h2> }\n                <div>Error Message: {this.state.error}</div>\n                { this.props.history !== undefined ? <button onClick={this.resetError}>Reset</button> : null }\n            </StyledError>\n        );\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseBodyText, getLocalUrl } from '../functions/useful';\nimport { parsePostBody } from './Post';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    margin: 5px;\n    margin-top: 10px;\n    padding: 10px;\n\n    & > div:first-child {\n        border-bottom: 1px solid gray;\n        padding: 5px;\n\n        & > a {\n            display: block;\n            color: white;\n            font-weight: bold;\n        }\n\n        & > div {\n            margin-top: 5px;\n            color: gray;\n            text-align: left;\n            margin-bottom: 5px;\n\n            & a {\n                color: gray;\n            }\n        }\n    }\n\n    & > div:last-child {\n        border-bottom: none;\n        padding-bottom: 0px;\n    }\n\n    @media screen and (max-width: 700px) {\n        margin: 0px;\n    }\n`\n\nconst Crosspost = ({data}) => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    const { title, selftext_html, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink, num_comments } = data;\n    let body = parseBodyText(selftext_html);\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data);  \n\n    //a crosspost will always be a local url, so use that as link\n    let localUrl = getLocalUrl(permalink, currentSub, currentPostId);\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created_utc*1000);\n\n    return (\n        <StyledComp>\n            <div>\n                <a href={localUrl}>{title}</a>\n                <div><a href={`#/user/${author}`}>{author}</a> - {num_comments} comments - {dateString}</div>\n            </div>\n            { bodyTag }\n        </StyledComp>\n    );\n}\n\nexport default Crosspost;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport Gallery from './Gallery';\nimport Spoiler from './Spoiler';\nimport LoadingSpinner from './Styled/LoadingSpinner';\nimport ErrorBoundary from './ErrorBoundary';\nimport Crosspost from './Crosspost';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments, getLocalUrl } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n\n    & > div > h2 {\n        word-break: break-word;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n\n    p.bodyImage {\n        max-width: fit-content;\n\n        & img {\n            max-width: 100%;\n        }\n    \n        & span {\n            display: block;\n            font-size: 0.8em;\n            color: #AAA;\n            text-align: center;\n        }\n    }\n\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    @media screen and (max-width: 700px) {\n        :hover {\n            background-color: black;\n        }\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const showContext = useSelector(state => state.showContext);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl, showContext]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed, media_metadata, is_gallery, gallery_data, spoiler, crosspost_parent_list} = post;\n\n    let localUrl = getLocalUrl(url, currentSub, currentPostId);\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data, crosspost_parent_list);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    let hasContext = comments[0] !== undefined ? comments[0].hasContext : false;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                <Spoiler spoiler={spoiler}>\n                    { bodyTag }\n                </Spoiler>\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> : null }\n            { permalinkUrl.length > 0 && hasContext ? <span> - <a href={`#/${currentSub}/comments/${currentPostId}/${permalinkUrl}/?context=10000`}>Show Context</a></span> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nexport const parsePostBody = (body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data, crosspost_parent_list) => {\n    body = parseLinks(body, true);\n\n    //check for crosspost\n    if (crosspost_parent_list !== undefined) {\n        let data = crosspost_parent_list[0];\n        return <PostBody className=\"postDivBody\">\n            <Crosspost data={data}/>\n        </PostBody>\n    }\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    if (is_gallery) {\n        return <PostBody className=\"postDivBody\"><ErrorBoundary><Gallery data={media_metadata} extraData={gallery_data}/></ErrorBoundary></PostBody>\n    }\n\n    if (url.includes('v.redd.it')) {\n        let url = `https://www.reddit.com${permalink}?ref=share&ref_source=embed`;\n        bodyTag = <PostBody className=\"postDivBody\">\n                    <blockquote className=\"reddit-card\">\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n                    </blockquote>\n                  </PostBody>\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, subHeading='', onReload}) => {\n    return (\n        <div>\n            <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n            { subHeading.length > 0 ? <h3 style={{textAlign: 'center'}}>{decodeURIComponent(subHeading)}</h3> : null }\n        </div>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { MdSettings } from 'react-icons/md';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst TopButtons = styled.div`\n    display: flex;\n    \n    & > button:first-child {\n        padding: 0px;\n        border-right: 1px solid gray;\n        width: 60px;\n        font-size: 1.4em;\n    }\n\n    & > button > svg {\n        position: relative;\n        top: 3px;\n    }\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const [showSettings, setShowSettings] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n        setShowSettings(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    const onClickShowSettings = () => {\n        setShowSettings(true);\n    }\n\n    if (showSettings) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <Settings/>\n            </StyledSideMenu>\n        );\n    } else if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <TopButtons>\n                    <SavedButton onClick={onClickShowSettings}><MdSettings/></SavedButton>\n                    <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                </TopButtons>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nimport { getPostList, getComments, parseURL, parseSearch, parseFlair } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const currentContext = useSelector(state => state.showContext);\n    const setContext = (val) => dispatch({type: 'SET_SHOW_CONTEXT', payload: val});\n\n    const currentUser = useSelector(state => state.currentUser);\n    const setCurrentUser = (val) => dispatch({type: 'SET_USER', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl, user} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    let showContext = location.search === '?context=10000';\n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n        if (showContext !== currentContext) setContext(showContext);\n        if (user.length > 0 && user !== currentUser) setCurrentUser(user);\n        \n        //if moving from user list to post to post list, then need to make sure user is reset otherwise still displays user list\n        if (user.length === 0 && newSort.length > 0 && postId.length === 0) setCurrentUser('');\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        let subHeading = '';\n        if (currentSearchForSubs) heading = `Searching Subs: ${currentSearch}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs) subHeading = `Searching: ${decodeURI(currentSearch)}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs && currentSearch.includes('flair_name')) subHeading = `Searching Flair: ${parseFlair(decodeURI(currentSearch.replace('flair_name:', '')))}`;\n        if (currentSub === 'user') heading = `${currentUser}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} subHeading={subHeading} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{height: '100%', overflow: 'hidden'}}>\n                    <TopMenu onBackClick={onBackClick}/>\n                    <div style={{marginTop: '50px'}}></div>\n                    { getMainPage() }\n                </div>\n            </ErrorBoundary>\n        );\n    } else {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{display: 'flex', height: '100%'}}>\n                    <div>\n                        <SideMenu/>\n                    </div>\n                    <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                        { getMainPage() }\n                    </div>\n                </div>\n            </ErrorBoundary>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}