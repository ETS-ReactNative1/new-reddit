{"version":3,"sources":["components/SubList.js","components/LoadingSpinner.js","components/PostLink.js","components/PostList.js","components/Comment.js","components/Comments.js","components/SortButtons.js","components/Post.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["pjson","require","SubList","props","startPoint","react_default","a","createElement","className","map","sub","i","link","NavLink","activeClassName","key","to","LoadingSpinner","PostLink","post","thumbnail","src","alt","test","bodyTag","dangerouslySetInnerHTML","__html","body","bodyHasImage","url","match","media","length","openBtn","onClick","e","preventDefault","bodyDiv","target","parentNode","querySelector","classList","toggle","contains","innerText","stickied","Link","concat","id","title","href","rel","domain","author","num_comments","permalink","PostList","_ref","posts","src_components_LoadingSpinner","src_components_PostLink","Comment","_this$props","this","comment","replies","components_Comments","comments","commentDiv","score","body_html","Component","Comments","src_components_Comment","SortButtons","currentSort","sortOptions","1","2","sortList","option","toLowerCase","Post","_props$postDetails","postDetails","commentSortMethod","shortUrl","substr","components_SortButtons","Header","heading","onReload","Page","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkUrlAndUpdate","onChangeSortMethod","sortMethod","setState","onChangeCommentSortMethod","getPostList","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","state","fetch","sent","json","error","children","oembed","parseBodyText","html","selftext_html","subreddit","t0","console","log","stop","_x","apply","arguments","getPostDetails","_ref2","_callee2","_data$0$data$children","_url","_context2","obj","parseComment","_x2","postId","_this2","src_components_SubList","components_Header","Switch","Redirect","exact","path","Route","render","src_components_PostList","assign","src_components_Post","text","replace","_this3","force","undefined","location","pathname","parts","split","postInfo","find","prevProps","prevState","App","BrowserRouter","component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bfabb1b.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './SubList.css';\nlet pjson = require('../../package.json');\n\nconst SubList = (props) => {\n    let startPoint = pjson.startPoint;\n    //temp sub list (maybe change to browser storage?)\n    const subs = [\n        'PSVR','PS4','Apple','iPhone','NoMansSkyTheGame','Minecraft','PS4Deals'\n    ];\n    \n    return (\n        <div className=\"subLinks\">\n            {\n                subs.map((sub,i) => {\n                    const link = startPoint+'/'+sub;\n                    return <NavLink className=\"navLink\" activeClassName=\"active\" key={i} to={link}>{sub}</NavLink>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SubList;","import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loadingSpinner\"></div>\n    );\n};\n\nexport default LoadingSpinner;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PostLink.css';\n\nconst PostLink = (props) => {\n    const {sub, post} = props;\n    \n    //decide whether to show a thumbnail    \n    let thumbnail = (\n        <div className=\"postThumbnail\">\n            <img src={post.thumbnail} alt=\"Thumbnail for post\" />\n        </div>\n    )\n\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === false){\n        thumbnail = <span></span>;\n    }\n\n    //toggle post body text open and closed\n    function toggleBodyOpen(e){\n        e.preventDefault();\n        const postDiv = e.target.parentNode.parentNode.parentNode;\n        const bodyDiv = postDiv.querySelector('.postLinkBody');\n\n        bodyDiv.classList.toggle('open');\n        if (bodyDiv.classList.contains('open')) e.target.innerText = '[ - ] ';\n        else e.target.innerText = '[ + ] ';\n    }\n    \n    //if there's a link to an image, replace that link with an img tag (maybe remove?)\n    // const imageLinksInBodyFull = post.body.match(/<a href=.+?(\\.(png|jpg|jpeg|bmp)).+?(<\\/a>)/g);\n    // if (imageLinksInBodyFull){\n    //     imageLinksInBodyFull.forEach(linkTag => {\n    //         const imageLinkInBody = linkTag.match(/\"http([a-zA-Z0-9\\W]+(.png|.jpg|.jpeg))\"/)[0].replace(/\"/g,'');\n    //         post.body = post.body.replace(linkTag, '<img src=\"'+imageLinkInBody+'\"/>');\n    //     });\n    // }\n    \n    //decide whether to show image preview in body\n    let bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.body}}></div>;\n    let bodyHasImage = false;\n    if (post.url.match(/.jpg$/)){\n        bodyTag = (<div className=\"postLinkBody\">\n            <img src={post.url} alt=\"Preview user linked to\" />\n        </div>);\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.media}}></div>;\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show an open button for post body\n    let openBtn = (<span> - <span className=\"postLinkOpen\" onClick={toggleBodyOpen}>[ + ] </span></span>);\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = <span></span>;\n    \n    //check if sticked and add another class\n    let className = 'postLink';\n    if (post.stickied) className += ' stickied';\n    \n    return (\n        <div className={className}>\n            {thumbnail}\n            <div className=\"postLinkContent\">\n                <Link to={`${sub}/${post.id}`} className=\"postLinkTitle\">{post.title}</Link>\n                <div className=\"postLinkMiddle\">\n                    <a className=\"postLinkDomain\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.domain} - </a>\n                    <span className=\"postLinkAuthor\">{post.author}</span>\n                    {openBtn}\n                </div>\n                {bodyTag}\n                <div className=\"postLinkFooter\">\n                    <Link to={`${sub}/${post.id}`} className=\"postLinkComments\">{post.num_comments} Comments </Link>\n                    - <a className=\"postLinkReddit\" href={'https://www.reddit.com'+post.permalink} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PostLink;\n\n\n\n/*\n\nscore: data.score,\nsubreddit: data.subreddit,\n*/","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\nimport PostLink from './PostLink';\nimport './PostList.css';\n\nconst PostList = ({posts, sub}) => {    \n    if (posts && posts.length === 0){\n        return (\n            <LoadingSpinner />\n        );\n    } else if (posts) {\n        return (\n            <div className=\"postListDiv\">\n                {\n                    posts.map(post => {\n                        return <PostLink key={post.id} post={post} sub={sub}/>\n                    })\n                }\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"postListDiv\">No Posts Found</div>\n        )\n    }\n};\n\nexport default PostList;","import React, {Component} from 'react';\nimport Comments from './Comments';\nimport './Comment.css';\n\nclass Comment extends Component {\n    render(){\n        let {comment, author} = this.props;\n        \n        //if there are any replies to this comment, create a new Comments object (will work recursively)\n        let replies = \"\";\n        if (comment.replies.length > 0){\n            replies = <Comments comments={comment.replies} author={author}/>;\n        }\n        \n        function toggleCommentClose(e){\n            e.preventDefault();\n            const commentDiv = e.target.parentNode.parentNode;\n            commentDiv.classList.toggle('closed');\n            if (commentDiv.classList.contains('closed')) e.target.innerText = '[ + ] ';\n            else e.target.innerText = '[ - ] ';\n        }\n        \n        return (\n            <div className=\"commentDiv\">\n                <div className=\"commentHeader\">\n                    <span className=\"commentClose\" onClick={toggleCommentClose}>[ - ] </span>\n                    <span className={comment.author === author ? \"commentAuthor OP\" : \"commentAuthor\"}>{comment.author}</span><span className=\"commentScore\"> | {comment.score}</span>\n                </div>\n                \n                <div className=\"commentText\" dangerouslySetInnerHTML={{ __html: comment.body_html }}></div>\n                \n                <div className=\"commentFooter\">\n                    <a className=\"commentPermalink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"http://www.reddit.com\"+comment.permalink}>Permalink</a>\n                </div>\n                {replies}\n            </div>\n        );\n    }\n}\n// const Comment = (props) => {\n// \n// }\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Comments = ({comments, author}) => {\n    if (comments && comments.length > 0) {\n        return (\n            <div className=\"comments\">\n            {\n                comments.map(comment => {\n                    if (!comment.author) return null;\n                    return <Comment key={comment.id} comment={comment} author={author} />\n                })\n            }\n            </div>\n        );\n    } else if (comments) {\n        return (\n            <div></div>\n        );\n    } else if (!comments){\n        return (\n            // <div>Loading Comments...</div>\n            <LoadingSpinner />\n        );\n    }\n}\n\nexport default Comments;","import React from 'react';\n\nconst SortButtons = ({onClick, currentSort, sortList}) => {\n    let sortChoices = {\n        1: ['Hot','New','Rising','Controversial','Top'],\n        2: ['Best','New','Top','Controversial','Old', 'Q&A'],\n    }\n    let sortOptions = sortChoices[sortList];\n    \n    return (\n        <div className=\"sortButtons\">\n            {\n                sortOptions.map((option,i) => {\n                    let className = 'sortButton';\n                    if (option.toLowerCase() === currentSort){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'best' && currentSort === 'confidence'){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'q&a' && currentSort === 'qa'){\n                        className += ' active';\n                    }\n                    return <span key={i} className={className} onClick={onClick}>{option.toLowerCase()}</span>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SortButtons;","import React from 'react';\nimport Comments from './Comments';\nimport SortButtons from './SortButtons';\nimport './Post.css';\n\nconst Post = (props) => {\n    let {title, body, comments, url, media, author} = props.postDetails;\n    let {currentSort, commentSortMethod} = props;\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <div dangerouslySetInnerHTML={{ __html: body }}></div>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <img src={url} alt=\"Preview of content\"/>\n    }\n    \n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n    \n    //check for media embed and replace body with this\n    if (media && media.length > 0){\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <div dangerouslySetInnerHTML={{ __html: media }}></div>\n    }\n    \n    return (\n        <div>\n            {\n                title.length === 0 ? <h1 className=\"loading\">Loading...</h1> : (\n                    <div className=\"postDiv\">\n                        <h1>{title}</h1>\n                        <div className=\"postMiddle\">\n                            <span>{author}</span>\n                            <a className=\"postGoToURL\" href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>\n                        </div>\n                        {bodyTag}\n                        {/* <hr/> */}\n                        <SortButtons onClick={commentSortMethod} currentSort={currentSort} sortList={2}/>\n                        <hr/>\n                        <Comments comments={comments} author={author} />\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 className=\"subHeader\">{heading} <span className=\"reloadButton\" onClick={onReload}>&#8635;</span></h1>\n    );\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport SubList from './components/SubList';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SortButtons from './components/SortButtons';\nconst pjson = require('../package.json');\n\nclass Page extends Component {\n    constructor(){\n        super();\n        this.state = {\n            sub: '',\n            postId: '',\n            sortMethod: 'hot',\n            commentSortMethod: 'new',\n            posts: [],\n            postDetails: {title: '', body: '', id: '', comments: []}\n        };\n    }\n    \n    render(){\n        let startPoint = pjson.startPoint;\n        return (\n            <div>\n                <SubList />\n                <Header heading={this.state.sub} onReload={this.onReload}/>\n                <SortButtons onClick={this.onChangeSortMethod} currentSort={this.state.sortMethod} sortList={1}/>\n                <hr/>\n                <Switch>\n                    <Redirect exact path='/' to={startPoint+'/'} />\n                    <Route exact path={startPoint+'/'} render={props => <PostList {...props} posts={this.state.posts} sub={this.state.sub}/>} />\n                    <Route exact path={startPoint+'/:sub'} render={props => <PostList {...props} posts={this.state.posts} sub={this.state.sub}/>} />\n                    <Route exact path={startPoint+\"/:sub/:post\"} render={props => <Post {...props} postDetails={this.state.postDetails} commentSortMethod={this.onChangeCommentSortMethod} currentSort={this.state.commentSortMethod} />} />\n                </Switch>\n            </div>\n        );\n    }\n    \n    onReload = () => {\n        this.checkUrlAndUpdate(true);\n    }\n    \n    onChangeSortMethod = (e) => {\n        let sortMethod = e.target.innerText.toLowerCase();\n        this.setState({sortMethod});\n    }\n    \n    onChangeCommentSortMethod = (e) => {\n        let commentSortMethod = e.target.innerText.toLowerCase();\n\n        switch(commentSortMethod){\n            case 'best': this.setState({commentSortMethod:'confidence'}); break;\n            case 'q&a': this.setState({commentSortMethod:'qa'}); break;\n            default: this.setState({commentSortMethod}); break;\n        }\n    }\n    \n    parseBodyText(text){\n        text ? text = text\n                        .replace(/&lt;/g,'<')\n                        .replace(/&gt;/g,'>')\n                        .replace(/&amp;#39;/g,\"'\")\n                        .replace(/&amp;quot;/g,'\"')\n                        .replace(/&amp;/g,\"&\")\n                        .replace(/&#x200B;/g,' ')\n                         : text = '';\n        return text;\n    }\n\n    getPostList = async (sub) => {\n        if (sub.length > 0) sub = 'r/'+sub;\n        \n        try {\n            let url = 'https://www.reddit.com/'+sub+'/'+this.state.sortMethod+'/.json';\n            if (sub.length === 0) url = 'https://www.reddit.com/.json';\n\n            let response = await fetch(url);\n            let data = await response.json();\n\n            if (data.error){\n                this.setState({posts: null});\n            } else {\n                if (data && data.data && data.data.children){\n                    let posts = data.data.children.map(post => {\n                        const data = post.data;\n\n                        let media = data.media;\n                        if (media && media.oembed){\n                            media = this.parseBodyText(media.oembed.html);\n                        } else {\n                            media = '';\n                        }\n                        \n                        return {\n                            author: data.author,\n                            domain: data.domain,\n                            title: this.parseBodyText(data.title),\n                            id: data.id,\n                            body: this.parseBodyText(data.selftext_html),\n                            num_comments: data.num_comments,\n                            score: data.score,\n                            subreddit: data.subreddit,\n                            stickied: data.stickied,\n                            url: data.url,\n                            thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                            permalink: data.permalink,\n                            media: media\n                        };\n                    });\n                    \n                    if (posts.length === 0) posts = null;\n                    this.setState({posts});\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            this.setState({posts:null});\n        }\n    };\n    \n    parseComment(comment){\n        let {body_html, id, author, permalink, replies, score} = comment;\n        body_html = this.parseBodyText(body_html);\n        \n        replies = typeof replies === 'object' ? replies.data.children : [];\n        \n        replies = replies.map(comment => {\n            //console.log(comment);\n            return this.parseComment(comment.data);\n        });\n        \n        return {body_html, id, author, permalink, replies, score};\n    }\n    \n    getPostDetails = async (url) => {\n        try {\n            let response = await fetch('https://www.reddit.com/r/'+url+'.json?sort='+this.state.commentSortMethod);\n            let data = await response.json();\n            \n            if (data.error){\n                this.setState({postDetails: {title: 'Not Found', body: '', id: ''}});\n            } else {\n                let {title, selftext_html, id, url, media, author} = data[0].data.children[0].data;\n\n                let comments = data[1].data.children.map(obj => {\n                    return this.parseComment(obj.data);\n                });\n                \n                if (media && media.oembed){\n                    media = this.parseBodyText(media.oembed.html);\n                } else {\n                    media = '';\n                }\n\n                //if this exists, replace &lt etc with proper symbols, otherwise set to empty string\n                selftext_html = this.parseBodyText(selftext_html);\n                this.setState({postDetails: {title, body: selftext_html, id, url, media, comments, author}});\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    checkUrlAndUpdate(force = false){\n        let startPoint = pjson.startPoint;\n        let url = this.props.location.pathname.replace(startPoint,'').replace('/','');\n        let parts = url.split('/');\n\n        if (parts.length === 1){\n            let sub = parts[0];\n            //on sub, so get post list\n            if (sub !== this.state.sub || force){\n                this.setState({sub: sub, posts:[]});\n                this.getPostList(url);\n            }\n        } else if (parts.length === 2){\n            let sub = parts[0];\n            let postId = parts[1];\n\n            if (sub !== this.state.sub || force){\n                this.setState({sub, posts: []});\n                this.getPostList(sub);\n            }\n            \n            if (postId !== this.state.postId || force){\n                //check if post details already exists within the current post array, and if so, use that for quicker rendering\n                let posts = this.state.posts || [];\n                let postInfo = posts.find(post => post.id === postId);\n                if (postInfo){\n                    this.setState({sub, postId, postDetails: postInfo});\n                } else {\n                    this.setState({sub, postId, postDetails: {title:'', body:'', id:''}});\n                }\n                this.getPostDetails(`${sub}/${postId}`);\n            }\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        let force = false;\n        if (prevState.sortMethod !== this.state.sortMethod) force = true;\n        if (prevState.commentSortMethod !== this.state.commentSortMethod) force = true;\n        this.checkUrlAndUpdate(force);        \n    }\n    \n    componentDidMount(){\n        this.checkUrlAndUpdate(true);\n    }\n}\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path='/' component={Page} />\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}