{"version":3,"sources":["components/ButtonGroup.js","components/ButtonList.js","components/Input.js","components/Button.js","components/SideButton.js","components/SubList.js","components/SortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/TopMenu.js","components/PostLink.js","components/LoadingSpinner.js","components/PostList.js","components/Comment.js","components/CommentList.js","functions/useful.js","components/Post.js","components/Header.js","components/SideMenu.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","SideButton","Icon","checkIfSubbed","subs","currentSub","length","includes","SubList","currentSort","useState","setSubs","editMode","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","onDeleteSub","sub","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","to","className","onClick","map","key","type","placeholder","onChange","e","target","value","SortMenu","option","StyledCheckbox","Checkbox","checked","SearchMenu","onSearch","onClearSearch","currentSearch","startValue","setValue","sortMethod","setSortMethod","thisSub","setThisSub","style","width","StyledTopMenu","MenuButton","TopMenu","onClickSubs","onClickSort","onClickSearch","showBackButton","onBackClick","sortMenuOpen","subMenuOpen","searchMenuOpen","StyledPostLink","stickied","PostThumbnail","PostTextGroup","PostTitle","PostDetails","PostExpand","PostComments","PostBody","PostLink","post","sort","expanded","setExpanded","undefined","dateString","formatDistanceStrict","Date","created","showThumbnail","test","thumbnail","body","replace","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","url","match","src","alt","media","openBtn","maxWidth","id","title","subreddit","href","rel","domain","num_comments","marginLeft","permalink","LoadingSpinner","PostList","posts","noPosts","textAlign","margin","StyledComment","CommentClose","span","CommentAuthor","original","CommentFooter","parseBody","newBody","Comment","comment","author","closed","setClosed","replies","comments","body_html","color","score","StyledCommentList","CommentList","parseComment","parseBodyText","data","children","text","getPostList","setPosts","setNoPosts","a","searchStr","searchSort","join","parsedStr","split","fetch","response","json","error","console","log","oembed","html","created_utc","selftext_html","getComments","setComments","setNoComments","setPostDetails","getDetails","ReactDOM","unstable_batchedUpdates","obj","StyledPost","parsePostBody","bodyTag","Post","noComments","shortUrl","substr","ReloadButton","Header","heading","onReload","StyledSideMenu","SideMenu","Dropdown","right","Page","location","history","setSort","postDetails","setSortMenuOpen","setSubMenuOpen","setSearchMenuOpen","setCurrentSearch","isMobile","useMediaQuery","newSort","postId","parts","parseURL","pathname","push","find","window","scrollTo","MainPage","Fragment","path","render","exact","height","overflow","goBack","marginTop","display","App","component","Boolean","hostname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14c87ff1.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > button:last-of-type {\n        border-left: 1px solid gray;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\n\nimport ButtonGroup from './ButtonGroup';\nimport ButtonList from './ButtonList';\nimport Input from './Input';\nimport Button from './Button';\nimport SideButton from './SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = ({currentSub, currentSort}) => {\n    const [subs, setSubs] = useState([]);\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                subs.map(sub => {\n                    return (\n                        <ButtonGroup key={'sub-'+sub}>\n                            <NavLink to={`/${sub}/${currentSort}`} className={sub === currentSub ? 'selected' : ''}>{sub}</NavLink>\n                            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub)}><FaTrashAlt/></SideButton> : null }\n                        </ButtonGroup>\n                    )\n                })\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <ButtonGroup><Button onClick={addCurrentSub}>Add Current Sub</Button></ButtonGroup> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './ButtonGroup';\nimport ButtonList from './ButtonList';\n\nconst SortMenu = ({currentSub, currentSort}) => {\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top'];\n\n    return (\n        <ButtonList>\n            <h3>Sort</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\n\nimport ButtonGroup from './ButtonGroup';\nimport ButtonList from './ButtonList';\nimport Input from './Input';\nimport Button from './Button';\nimport SideButton from './SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = ({onSearch, onClearSearch, currentSearch}) => {\n    let startValue = currentSearch.length > 0 ? currentSearch : '';\n    const [value, setValue] = useState(startValue);\n    const [sortMethod, setSortMethod] = useState('relevance');\n    const [thisSub, setThisSub] = useState(true);\n\n    const onClickSearch = () => {\n        onSearch(value, sortMethod, thisSub);\n    }\n\n    const onSearchChange = (e) => {\n        setValue(e.target.value);\n    }\n\n    const toggleThisSub = () => {\n        setThisSub(!thisSub);\n    }\n\n    const onClickNew = () => {\n        setSortMethod('new');\n    }\n\n    const onClickRelevant = () => {\n        setSortMethod('relevance');\n    }\n\n    const onClickClear = () => {\n        onClearSearch();\n        setValue('');\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onSearchChange} value={value}/>\n                <SideButton onClick={onClickSearch}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={thisSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={sortMethod === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={sortMethod === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <Button onClick={onClickClear}>Clear Search</Button>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst TopMenu = ({onClickSubs, onClickSort, onClickSearch, showBackButton, onBackClick, sortMenuOpen, subMenuOpen, searchMenuOpen}) => {\n    return (\n        <StyledTopMenu>\n            <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n            { showBackButton ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n            <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n            <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n        </StyledTopMenu>\n    );\n};\n\nexport default TopMenu;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaPlus, FaMinus } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n\n    & > a > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n`;\n\nconst PostLink = ({post, sub, sort}) => {\n    const [expanded, setExpanded] = useState(false);\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = post.body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaMinus/> : <FaPlus/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub}/comments/${post.id}`}>{post.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${sort}`}>{post.subreddit}</NavLink> - <span><a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? bodyContent : null }\n                        <div>\n                            <PostComments><NavLink to={`/${sub}/comments/${post.id}`}>{post.num_comments} <FaRegComment/></NavLink></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com/${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nexport default PostLink;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\n\nimport PostLink from './PostLink';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst PostList = ({posts, sub, sort, noPosts}) => {\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0) return <div><LoadingSpinner/></div>;    \n\n    return (\n        <div style={{margin: 'auto'}}>\n            {\n                posts.map(post => {\n                    return <PostLink key={post.id} post={post} sub={sub} sort={sort}/>\n                })\n            }\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Comments from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid red;\n    border-top: 1px solid red;\n    margin-bottom: 0px;\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.span`\n    ${props => props.original ? `\n        color: #059afe; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst Comment = ({comment, author}) => {  \n    const [closed, setClosed] = useState(false);\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (comment.replies.length > 0){\n        replies = <Comments comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseBody(comment.body_html);\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }\n\n    return (\n        <StyledComment>\n            <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose>\n            <CommentAuthor original={comment.author === author}>{comment.author}</CommentAuthor>\n            <span style={{color: 'gray'}}> | {comment.score}</span>\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }}></div> }\n            { closed ? null : <CommentFooter><a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a></CommentFooter> }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nconst parseBody = (body) => {    \n    //make sure any links within the body open in a new tab\n    let newBody = body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit are adjusted\n    newBody = newBody.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n\n    //but links to other reddit subs can be kept on this website\n    newBody = newBody.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');\n\n    return newBody; \n}\n\nexport default Comment;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList>\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import ReactDOM from 'react-dom';\n\nconst parseComment = (comment) => {\n    let {body_html, id, author, permalink, replies, score} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        //console.log(comment);\n        return parseComment(comment.data);\n    });\n    \n    return {body_html, id, author, permalink, replies, score};\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub, newSort, postId;\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' ? newSort = parts[2] : newSort = '';\n    }\n\n    return {sub, newSort, postId};\n}\n\nconst getPostList = async (sub, sort, setPosts, setNoPosts, searchStr='', searchSort='new', thisSub=true) => {\n    if (sub.length > 0) sub = 'r/'+sub;\n    setPosts([]);\n\n    if (sub === 'r/My Subreddits') {        \n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        sub = 'r/'+storedSubs.join('+');\n        if (storedSubs.length === 0) sub = '/r/All';\n    }\n    \n    try {\n        let url = `https://www.reddit.com/${sub}/${sort}/.json`;\n\n        if (searchStr.length > 0) {\n            let parsedStr = searchStr.split(' ').join('+');\n            url = `https://www.reddit.com/${sub}/search.json?q=${parsedStr}${thisSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${searchSort}`;\n        }\n\n        //next page url = (add to end) ?after=t3_f6zx4z   (so just add post Id after t3_)\n\n        if (sub.length === 0) url = 'https://www.reddit.com/.json';\n\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            setNoPosts(true);\n            setPosts([]);\n        } else {\n            if (data && data.data && data.data.children){\n                let posts = data.data.children.map(post => {\n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }\n                    \n                    return {\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media\n                    };\n                });\n                                \n                setPosts(posts);\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        setPosts([]);\n        setNoPosts(true);\n    }\n};\n\nconst getComments = async (url, setComments, setNoComments, setPostDetails, getDetails) => {    \n    ReactDOM.unstable_batchedUpdates(() => {\n        setComments([]);\n        setNoComments(false);\n    });\n    try {        \n        let response = await fetch('https://www.reddit.com/r/'+url+'.json?sort=new');\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, author, created_utc, permalink} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj.data);\n            });\n\n            ReactDOM.unstable_batchedUpdates(() => {\n                if (getDetails) setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, permalink});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseURL,\n    getPostList,\n    getComments\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport CommentList from './CommentList';\nimport LoadingSpinner from './LoadingSpinner';\n\nimport { parseBodyText } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n`;\n\nconst Post = ({post, comments, noComments}) => {\n    if (post.body === undefined) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink} = post;  \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails>{author} | {dateString} | <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Go to URL ({shortUrl})</a></PostDetails>\n                <PostDetails><a href={`https://www.reddit.com/${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a></PostDetails>\n                { bodyTag }\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            <CommentList comments={comments} author={author}/>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media) => {\n    //make sure any links within the body open in a new tab\n    body = body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit users are adjusted\n    body = body.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    body = body.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');    \n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nimport SortMenu from './SortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SideMenu = ({currentSub, currentSort, onSearch, onClearSearch, currentSearch}) => {\n    return (\n        <StyledSideMenu>\n            <SearchMenu onSearch={onSearch} currentSearch={currentSearch} onClearSearch={onClearSearch}/>\n            <SortMenu currentSub={currentSub} currentSort={currentSort}/>\n            <SubList currentSub={currentSub} currentSort={currentSort}/>\n        </StyledSideMenu>\n    );\n}\n\nexport default SideMenu;","import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport SubList from './components/SubList';\nimport SortMenu from './components/SortMenu';\nimport SearchMenu from './components/SearchMenu';\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\n\nimport { getPostList, getComments, parseURL } from './functions/useful';\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: 250px;\n    background-color: black;\n    z-index: 5;\n    top: 37px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst Page = ({location, history}) => {\n    const [sort, setSort] = useState('hot');\n    const [posts, setPosts] = useState([]);\n    const [noPosts, setNoPosts] = useState(false);\n\n    const [comments, setComments] = useState([]);\n    const [noComments, setNoComments] = useState(false);\n\n    const [postDetails, setPostDetails] = useState({});\n\n    const [sortMenuOpen, setSortMenuOpen] = useState(false);\n    const [subMenuOpen, setSubMenuOpen] = useState(false);\n    const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n    const [currentSearch, setCurrentSearch] = useState('');\n\n    // const [searchStr, setSearchStr] = useState('');\n    // const [searchSort, setSearchSort] = useState('new');\n    // const [thisSub, setThisSub] = useState(true);\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId} = parseURL(location.pathname);  \n\n    if (sub.length === 0) {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) sub = storedSubs[0];\n        else sub = 'Popular';\n        history.push(`/${sub}`);\n    }\n\n    useEffect(() => {\n        setSubMenuOpen(false);\n        setSortMenuOpen(false);        \n        getPostList(sub, sort, setPosts, setNoPosts);\n    }, [sort, sub]);\n\n    useEffect(() => {\n        if (postId.length > 0 ) {\n            let post = undefined;\n            if (postId.length > 0) post = posts.find(post => post.id === postId);\n            if (post === undefined) setPostDetails({});\n            else setPostDetails(post);\n            getComments(`${sub}/comments/${postId}/`, setComments, setNoComments, setPostDetails, true);\n            window.scrollTo(0,0);        \n        }\n    }, [postId, posts, sub]);\n\n    if (newSort !== undefined && newSort.length > 0 && newSort !== sort) {\n        setSort(newSort);\n        return (<div></div>);\n    }\n\n    const onReload = () => {\n        setPosts([]);\n        getPostList(sub, sort, setPosts);\n    }\n\n    const onToggleSortMenu = () => {\n        if (!sortMenuOpen) setSubMenuOpen(false);\n        if (!sortMenuOpen) setSearchMenuOpen(false);\n        setSortMenuOpen(!sortMenuOpen);\n    }\n\n    const onToggleSubsMenu = () => {\n        if (!subMenuOpen) setSortMenuOpen(false);\n        if (!subMenuOpen) setSearchMenuOpen(false);\n        setSubMenuOpen(!subMenuOpen);        \n    }   \n\n    const onToggleSearchMenu = () => {\n        if (!searchMenuOpen) setSortMenuOpen(false);\n        if (!searchMenuOpen) setSubMenuOpen(false);\n        setSearchMenuOpen(!searchMenuOpen);\n    } \n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const onSearch = (value, sortMethod, thisSub) => {\n        setSubMenuOpen(false);\n        setSortMenuOpen(false);      \n        setSearchMenuOpen(false);  \n        setCurrentSearch(value);\n        getPostList(sub, sort, setPosts, setNoPosts, value, sortMethod, thisSub);\n    }\n\n    const onClearSearch = () => {\n        getPostList(sub, sort, setPosts, setNoPosts);\n        setCurrentSearch('');\n        setSearchMenuOpen(false); \n    }\n\n    const MainPage = () => {\n        return (\n            <React.Fragment>\n                <Route path={'/'} render={props => <Header {...props} heading={sub} onReload={onReload}/>} />\n                <Route exact path={'/:sub'} render={props => <PostList {...props} posts={posts} sub={sub} sort={sort} noPosts={noPosts}/>} />\n                <Route exact path={'/:sub/:sort'} render={props => <PostList {...props} posts={posts} sub={sub} sort={sort} noPosts={noPosts}/>} />\n                <Route exact path={'/:sub/comments/:id'} render={props => <Post {...props} post={postDetails} comments={comments} noComments={noComments}/>} />\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <div style={{height: '100%', overflow: 'hidden'}}>\n                <TopMenu onClickSubs={onToggleSubsMenu} onClickSort={onToggleSortMenu} onClickSearch={onToggleSearchMenu} showBackButton={postId.length > 0 ? true : false} onBackClick={onBackClick} sortMenuOpen={sortMenuOpen} subMenuOpen={subMenuOpen} searchMenuOpen={searchMenuOpen}/>\n                { subMenuOpen ? <Dropdown><SubList currentSub={sub} currentSort={sort}/></Dropdown> : null }\n                { sortMenuOpen ? <Dropdown right={true}><SortMenu currentSub={sub} currentSort={sort}/></Dropdown> : null }\n                { searchMenuOpen ? <Dropdown right={true}><SearchMenu onSearch={onSearch} currentSearch={currentSearch} onClearSearch={onClearSearch}/></Dropdown> : null }\n                <div style={{marginTop: '50px'}}></div>\n                { <MainPage/> }\n            </div>\n        );\n    } else {\n        return (\n            <div style={{display: 'flex', height: '100%'}}>\n                <div>\n                    <Route path={'/'} render={props => <SideMenu {...props} currentSub={sub} currentSort={sort} onSearch={onSearch} currentSearch={currentSearch} onClearSearch={onClearSearch}/>} />\n                </div>\n                <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px'}}>\n                    { <MainPage/> }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}