{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","checkIfSubbed","subs","currentSub","length","includes","SubList","dispatch","useDispatch","useSelector","state","currentSort","setSubs","val","type","payload","useState","editMode","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","onDeleteSub","sub","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","to","className","onClick","map","key","style","textTransform","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","display","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","onKeyPress","width","saved","currentPostId","obj","id","url","fontSize","title","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","saveMenuOpen","Fragment","SaveList","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","noComments","searchForSubs","previousUrl","permalinkUrl","store","createStore","action","data","parseComment","comment","body_html","name","author","permalink","replies","score","created_utc","parseBodyText","children","parseLinks","text","redditMatches","replace","match","forEach","parseBool","str","getMySubs","prepend","join","getPostList","a","loadMore","force","getState","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","kind","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","body","selftext_html","num_comments","stickied","thumbnail","media_embed","noMore","getComments","setComments","setNoComments","setPostDetails","PostTitle","PostTextGroup","PostDetails","PostExpand","StyledPostLink","PostThumbnail","PostComments","PostBody","React","memo","onClickLink","expanded","setExpanded","undefined","dateString","formatDistanceStrict","Date","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","openBtn","maxWidth","href","rel","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","toLowerCase","StyledCommentList","CommentList","StyledComment","single","CommentClose","span","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","pointString","color","LoadingSpinner","PostList","textAlign","hide","position","top","hasMore","margin","marginBottom","dataLength","next","loader","scrollableTarget","scrollThreshold","StyledPost","ScrollButton","SimpleButton","parsePostBody","bodyTag","content","Post","isMobile","useMediaQuery","find","updatePostDetails","window","scrollTo","urlMatches","localUrl","shortUrl","substr","isSaved","urlTag","newSaved","link","commentDiv","document","querySelector","i","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","onReload","StyledSideMenu","SavedButton","SideMenu","showSaved","setShowSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","parts","newSort","postId","userSort","parseURL","pathname","searchStr","parseSearch","storedSaves","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a57280d2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                subs.map(sub => {\n                    return (\n                        <ButtonGroup key={'sub-'+sub}>\n                            <NavLink to={`/${sub}/${currentSort}`} className={sub === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub}</NavLink>\n                            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub)}><FaTrashAlt/></SideButton> : null }\n                        </ButtonGroup>\n                    )\n                })\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub === 'user') return true;\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSort = useSelector(state => state.currentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentSort}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={search} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        default: return state;\n    }\n};","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (comment) => {\n    let {body_html, id, name, author, permalink, replies, score, created_utc} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        //console.log(comment);\n        return parseComment(comment.data);\n    });\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc};\n}\n\nconst parseLinks = (text) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit users are adjusted\n    text = text.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    let search = searchStr.match(/search=([a-zA-Z0-9% ]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ');\n    \n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentSort}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (url === previousUrl && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(data);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    \n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, author, created_utc, permalink} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj.data);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    updatePostDetails\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span></PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? bodyContent : null }\n                        <div>\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid red;\n    border-top: 1px solid red;\n    margin-bottom: 0px;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover {\n        cursor: pointer;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (comment.replies.length > 0){\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    return (\n        <StyledComment single={single}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{comment.link_title}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            <span style={{color: 'gray'}}> {single ? '' : '|'} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span>\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }}></div> }\n            { closed ? null : <CommentFooter><a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a>{ single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }</CommentFooter> }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;    \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed} = post;\n\n    //check if post is a link to another post and make sure it goes there locally and not on a new page\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                { bodyTag }\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media, media_embed) => {\n    body = parseLinks(body);\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\n\nimport { getPostList, getComments, parseURL, parseSearch } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    //load saved posts from local storage\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n    useEffect(() => {\n        let storedSaves = localStorage.getItem('saved');\n        storedSaves = storedSaves ? JSON.parse(storedSaves) : [];\n        setSaved(storedSaves);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);    \n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        if (currentSearchForSubs) heading = `Searching: ${currentSearch}`;\n        if (currentSub === 'user') heading = `${currentSort}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <div style={{height: '100%', overflow: 'hidden'}}>\n                <TopMenu onBackClick={onBackClick}/>\n                <div style={{marginTop: '50px'}}></div>\n                { getMainPage() }\n            </div>\n        );\n    } else {\n        return (\n            <div style={{display: 'flex', height: '100%'}}>\n                <div>\n                    <SideMenu/>\n                </div>\n                <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                    { getMainPage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}