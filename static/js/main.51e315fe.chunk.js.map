{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/Download.js","components/Upload.js","components/Settings.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/Styled/Flair.js","components/Spoiler.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Gallery.js","components/ErrorBoundary.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","CustomSub","sub","currentSub","currentSort","onDeleteSub","editMode","key","id","className","style","position","top","to","textTransform","onClick","checkIfSubbed","subs","length","includes","SubList","dispatch","useDispatch","useSelector","state","setSubs","val","type","payload","useState","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","displaySubs","map","list","setList","data","handle","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","currentUser","display","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","decodeURI","onKeyPress","width","saved","currentPostId","obj","url","fontSize","title","StyledComp","Download","filename","format","Date","dataStr","encodeURIComponent","link","document","createElement","setAttribute","click","Upload","onUpload","importData","setImportData","fileName","setFileName","fileInput","useRef","uniqueId","Math","floor","random","file","files","undefined","match","reader","FileReader","name","onload","text","result","readAsText","ref","htmlFor","current","Settings","onUploadSubs","valid","Array","isArray","i","newSubs","forEach","alert","onUploadSaved","newSaved","savedItem","find","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","saveMenuOpen","settingsMenuOpen","Fragment","SaveList","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","extraComments","noComments","searchForSubs","previousUrl","permalinkUrl","showContext","store","createStore","action","parseComment","parent","kind","permalink","parent_id","replace","body_html","author","replies","score","comment","created_utc","stickied","parseBodyText","children","hasContext","parseLinks","redditMatches","parseFlair","flair","trim","parseBool","str","getMySubs","prepend","join","getPostList","a","loadMore","force","getState","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","body","selftext_html","num_comments","thumbnail","media_embed","spoiler","link_flair_text","link_flair_text_color","link_flair_background_color","noMore","getMoreComments","fullUrl","setExtraComments","newComments","parentComment","newExtras","getComments","setComments","setNoComments","setPostDetails","context","media_metadata","is_gallery","gallery_data","PostTitle","PostTextGroup","PostDetails","PostExpand","Flair","span","color","backgroundColor","Spoiler","showSpoiler","setShowSpoiler","StyledPostLink","PostThumbnail","PostComments","PostBody","SpoilerTag","React","memo","onClickLink","onClickFlair","expanded","setExpanded","dateString","formatDistanceStrict","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","href","rel","openBtn","flairColor","flairBgColor","maxWidth","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","toLowerCase","StyledCommentList","CommentList","StyledComment","single","CommentClose","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","permalinkComment","extras","pointString","LoadingSpinner","PostList","textAlign","hide","hasMore","sorting","margin","marginBottom","dataLength","next","loader","scrollableTarget","scrollThreshold","getURL","index","limit","u","Gallery","extraData","firstId","Object","keys","setId","isMobile","useMediaQuery","level4","level5","indexOf","numberOfImages","showSpinner","setShowSpinner","p","s","caption","extraDataObj","items","media_id","onClickThumb","nextId","left","zIndex","onLoad","values","StyledError","ErrorBoundary","resetError","setState","hasError","errorInfo","this","message","Component","StyledPost","ScrollButton","SimpleButton","parsePostBody","bodyTag","content","Post","updatePostDetails","window","scrollTo","urlMatches","localUrl","shortUrl","substr","isSaved","urlTag","commentDiv","querySelector","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","subHeading","onReload","decodeURIComponent","StyledSideMenu","SavedButton","TopButtons","SideMenu","showSaved","setShowSaved","showSettings","setShowSettings","onClickHideSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","currentContext","setCurrentUser","parts","newSort","postId","userSort","user","parseURL","pathname","searchStr","parseSearch","storedSaves","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setContext","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51e315fe.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > div {\n        flex-grow: 1;\n    }\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n\n    & .handle {\n        width: 40px;\n        min-width: 40px;\n        height: 31px;\n        border-top: 1px solid gray;\n        border-right: 1px solid gray;\n    }\n\n    & .handle:hover {\n        cursor: pointer;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n        overflow: hidden;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n\n        & a:hover {\n            background-color: black;\n        }\n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n\n    @media screen and (max-device-width: 600px){\n        &:hover {\n            background-color: black;\n        } \n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { TiArrowUnsorted } from 'react-icons/ti';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ReactSortable } from 'react-sortablejs';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const reorder = (data) => {\n        if (data.length === 0) return;\n        let newSubArr = data.map(sub => sub.id);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    let displaySubs = subs.map(sub => ({id: sub}));\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                editMode \n                    ? ( <ReactSortable list={displaySubs} setList={reorder} handle=\".handle\">\n                            { displaySubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>) }\n                        </ReactSortable> ) \n                    : displaySubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>)\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst CustomSub = ({sub, currentSub, currentSort, onDeleteSub, editMode}) => {\n    return (\n        <ButtonGroup key={'sub-'+sub.id}>\n            { editMode ? <div className=\"handle\"><TiArrowUnsorted style={{position: 'relative', top: '8px'}}/></div> : null }\n            <NavLink to={`/${sub.id}/${currentSort}`} className={sub.id === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub.id}</NavLink>\n            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub.id)}><FaTrashAlt/></SideButton> : null }\n        </ButtonGroup>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub === 'user') return true;\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top', 'comments'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const currentUser = useSelector(state => state.currentUser);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentUser}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        // if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={decodeURI(search)} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import React from 'react';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\n\nconst StyledComp = styled.div`\n    background-color: black;\n    color: white;\n    width: 150px;\n    border-radius: 5px;\n    padding: 5px;\n    margin: 5px;\n    display: inline-block;\n    border: 1px solid gray;\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst Download = ({data, filename=`Data - ${format(new Date(),'yyyy-MM-dd')}.json`}) => {\n    const downloadJson = () => {\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data, null, 2));\n\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", dataStr);\n        link.setAttribute(\"download\", filename);\n        link.click();\n    }\n\n    return (\n        <StyledComp onClick={downloadJson}>Download</StyledComp>\n    );\n}\n\nexport default Download;","import React from 'react';\nimport { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    display: inline-flex;\n    margin: 5px;\n    color: white;\n\n    & > input {\n        display: none;\n    }\n\n    & > #filename {\n        color: white;\n        width: 150px;\n        height: 28px;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        display: inline-block;\n        padding: 5px;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n    }\n\n    & > #uploadButton {\n        display: inline-block;\n        height: 28px;\n        padding: 5px 10px;\n        background-color: gray;\n        border-radius: 0px 5px 5px 0px;\n    }\n\n    & > #uploadButton:hover {\n        cursor: pointer;\n        filter: brightness(75%);\n    }\n\n    & > #filename:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Upload = ({onUpload=()=>{}}) => {\n    const [importData, setImportData] = useState(null);\n    const [fileName, setFileName] = useState('Choose a File');\n    const fileInput = useRef(null);\n\n    const onFileChange = (e) => {\n        const file = e.target.files[0];\n        if (file === undefined) return;\n\n        if (file.type.match('application/json')) {\n            const reader = new FileReader();\n            setFileName(file.name);\n\n            reader.onload = (e) => {\n                let text = reader.result;\n                let obj = JSON.parse(text);\n                \n                setImportData(obj);\n            }\n\n            reader.readAsText(file);\n        } else {\n            setImportData(null);\n            setFileName('Incorrect File Type');\n        }\n    }\n\n    const onImport = () => {\n        if (importData) {\n            setFileName('File Uploaded')\n            onUpload(importData);\n            setImportData(null);\n            fileInput.current.value = '';\n        } else {\n            setFileName('Choose a File');\n        }\n    }\n\n    const uniqueId = 'fileUpload-' + Math.floor(Math.random() * 100);\n\n    return (\n        <StyledComp>\n            <input type='file' id={uniqueId} onChange={onFileChange} ref={fileInput}/>\n            <label id='filename' htmlFor={uniqueId}>{fileName}</label>\n            <div id='uploadButton' onClick={onImport}>Upload</div>\n        </StyledComp>\n    );\n}\n\nexport default Upload;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Download from './Download';\nimport Upload from './Upload';\n\nconst StyledComp = styled.div`\n    text-align: center;\n\n    & > #group {\n        margin-top: 20px;\n    }\n`;\n\nconst Settings = () => {\n    const dispatch = useDispatch();\n    const saved = useSelector(state => state.saved);\n    const subs = useSelector(state => state.subs);\n\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    const onUploadSubs = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSubs = [...subs];\n        data.forEach(sub => {\n            if (subs.includes(sub)) return;\n            newSubs.push(sub);\n        });\n\n        //set to state and save to localstorage\n        setSubs(newSubs);\n        localStorage.setItem('subs', JSON.stringify(newSubs));\n    }\n    \n    const onUploadSaved = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            let obj = data[i];\n            if (typeof obj !== 'object') { valid = false; break; }\n            if (!obj.id || !obj.title || !obj.sub || !obj.url) { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSaved = [...saved];\n        data.forEach(savedItem => {\n            if (saved.find((obj) => obj.id === savedItem.id)) return;\n            newSaved.push(savedItem);\n        });\n\n        //set to state and save to localstorage\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    const onUploadBoth = (data) => {\n        if (data.subs !== undefined) onUploadSubs(data.subs);\n        if (data.saved !== undefined) onUploadSaved(data.saved);\n    }\n\n    return (\n        <StyledComp>\n            <h3>Settings</h3>\n            <p>Download and Upload the list of subs and saved posts.</p>\n            <div id=\"group\">\n                <div>Sub List</div>\n                <Upload onUpload={onUploadSubs}/>\n                <Download data={subs} filename='Reddit Sub List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Save List</div>\n                <Upload onUpload={onUploadSaved}/>\n                <Download data={saved} filename='Reddit Saved List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Both</div>\n                <Upload onUpload={onUploadBoth}/>\n                <Download data={{subs: subs, saved: saved}} filename='Reddit Backup.json'/>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Settings;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MdSettings } from 'react-icons/md';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2),  & > div:nth-last-child(3){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n\n    & > div:last-child {\n        font-size: 1.4em;\n        height: 34px;\n    }\n\n    & > div:last-child > svg {\n        position: relative;\n        top: -2px;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const settingsMenuOpen = useSelector(state => state.settingsMenuOpen);\n    const onClickSettings = () => settingsMenuOpen ? dispatch({type: 'CLOSE_SETTINGS'}) : dispatch({type: 'OPEN_SETTINGS'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n                <MenuButton onClick={onClickSettings} selected={settingsMenuOpen}><MdSettings/></MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n            { settingsMenuOpen ? <Dropdown right={true}><Settings/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n    currentUser: '',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    extraComments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n    settingsMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n    showContext: false,\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n        case 'SET_USER': return {...state, currentUser: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data, extraComments: []};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, settingsMenuOpen: false, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'OPEN_SETTINGS': return {...state, settingsMenuOpen: true, saveMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SETTINGS': return {...state, settingsMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_EXTRA_COMMENTS': return {...state, extraComments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        case 'SET_SHOW_CONTEXT': return {...state, showContext: data};\n        default: return state;\n    }\n};","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (obj, parent=null) => {        \n    //adding support for more comment loading within replies\n    if (obj.kind === 'more') {        \n        let permalink = parent !== null ? parent.data.permalink.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+\\/([a-zA-Z0-9_]+)\\//)[1] : '';\n        return {\n            kind: 'more',\n            id: obj.data.parent_id.replace('t1_',''),\n            body_html: '',\n            name: '',\n            author: '',\n            replies: [],\n            score: 0,\n            permalink: permalink\n        };\n    }\n    \n    let comment = obj.data;\n    let {body_html, id, name, author, permalink, replies, score, created_utc, parent_id, stickied} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        return parseComment(comment, obj);\n    });\n\n    const hasContext = !parent_id.includes('t3_');\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc, hasContext, stickied};\n}\n\nconst parseLinks = (text) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //but links to other reddit subs or users can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/u/g, 'href=\"#/user');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseFlair = (flair) => {\n    if (flair === undefined || flair === null) return '';\n\n    //filter out flair logos\n    flair = flair.length > 0 ? flair.replace(/:[a-zA-Z0-9_-]+:/g, '') : '';\n    flair = flair.trim();\n    flair = parseBodyText(flair);\n    return flair;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n    let user = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] === 'comments' && parts[3] === undefined) newSort = 'comments';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if (parts[1] === 'user' && parts[2] !== undefined) { user = parts[2]; newSort = ''; }\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl, user};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    searchStr = searchStr.replace('&amp;', '%26'); //if search string contains &, replace with %26 so the regex still catches it\n    let search = searchStr.match(/search=([^&]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ').replace(/%22/g, '\"');\n\n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentUser}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (decodeURI(url) === decodeURI(previousUrl) && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        // console.log('Fetching data with url: '+url);\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(post);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed,\n                        spoiler: data.spoiler,\n                        link_flair_text: data.link_flair_text,\n                        link_flair_text_color: data.link_flair_text_color,\n                        link_flair_background_color: data.link_flair_background_color\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getMoreComments = async (id, fullUrl) => {\n    const state = store.getState();\n    const { extraComments, currentSub, currentPostId } = state;\n    const setExtraComments = (val) => store.dispatch({type: 'SET_EXTRA_COMMENTS', payload: val});\n\n    try {\n        let response = await fetch(`https://www.reddit.com/r/${currentSub}/comments/${currentPostId}/${fullUrl}/${id}.json`);\n        let data = await response.json();\n\n        if (data.error) {\n            console.log('Getting More Comments - Error: ', data.error);\n        } else {\n            let newComments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n            \n            //make sure it doesn't already exist in case it tried to load more twice\n            let parentComment = newComments[0];\n            let check = extraComments.find(obj => obj.id === parentComment.id);\n            if (check === undefined) {\n                let newExtras = [...extraComments, parentComment];\n                setExtraComments(newExtras);\n            }\n        }\n    } catch (error) {\n        console.log('Getting More Comments - URL Error: ', error);\n    }\n}\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl, showContext } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    let context = showContext && permalinkUrl.length > 0 ? 10000 : 0;\n\n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}&context=${context}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink, spoiler} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink, media_metadata, is_gallery, gallery_data, spoiler});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseFlair,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    getMoreComments,\n    updatePostDetails\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import styled from 'styled-components';\n\nconst Flair = styled.span`\n    margin-right: 5px;\n    padding: 1px 3px;\n    color: ${props => props.color === 'light' ? 'white' : 'black'};\n    background-color: ${props => props.backgroundColor};\n    cursor: pointer;\n`;\n\nexport default Flair;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border-bottom: 1px solid #545452;\n    margin-bottom: 5px;\n    padding: 30px;\n    background-color: #545452;\n    text-align: center;\n\n    & > span {\n        border: 1px solid white;\n        border-radius: 5px;\n        padding: 10px;\n    }\n\n    & > span:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Spoiler = ({children, spoiler}) => {\n    const [showSpoiler, setShowSpoiler] = useState(false);\n\n    const onClickShow = () => {\n        setShowSpoiler(true);\n    }\n\n    if (spoiler && !showSpoiler) return <StyledComp><span onClick={onClickShow}>Show Spoiler</span></StyledComp>\n    else return <div>{children}</div>\n}\n\nexport default Spoiler;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, parseBodyText, parseFlair } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\nimport Flair from './Styled/Flair';\nimport Spoiler from './Spoiler';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n`;\n\nconst SpoilerTag = styled.span`\n    background-color: red;\n    margin-right: 10px;\n    font-weight: bold;\n    padding: 2px;\n    text-transform: uppercase;\n    font-size: 0.8em;\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort, onClickFlair=()=>{} }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body);\n    post.title = parseBodyText(post.title);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //show embedded reddit video\n    if (post.url.includes('v.redd.it')) {        \n        let url = `https://www.reddit.com${post.permalink}?ref=share&ref_source=embed`;\n        bodyContent = <PostBody>\n            <blockquote className=\"reddit-card\">\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{post.title}</a>\n            </blockquote>\n        </PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    //get flair\n    let flair = parseFlair(post.link_flair_text);\n    let flairColor = post.link_flair_text_color;\n    let flairBgColor = post.link_flair_background_color;\n    if (flairBgColor.length === 0) {\n        flairBgColor = 'white';\n        flairColor = 'black';\n    }\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle>\n                            { flair.length > 0 ? <Flair color={flairColor} backgroundColor={flairBgColor} onClick={onClickFlair(post.link_flair_text)}>{flair}</Flair> : null }\n                            <span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span>\n                        </PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <Spoiler spoiler={post.spoiler}>{bodyContent}</Spoiler> : null }\n                        <div>\n                            { post.spoiler ? <SpoilerTag>Spoiler</SpoilerTag> : null }\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, getMoreComments, parseBodyText } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-top: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    margin-bottom: 0px;\n    transition: border-left 0.5s;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n\n    :hover {\n        border-left: 1px solid #fcc203;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover, & > div:hover {\n        cursor: pointer;\n    }\n\n    & > div {\n        margin-top: 10px;\n        font-size: 1.2em;\n        display: inline-block;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n    const extraComments = useSelector(state => state.extraComments);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const currentSub = useSelector(state => state.currentSub);\n\n    let permalinkId = permalinkUrl.split('/')[1];\n    let permalinkComment = permalinkId === comment.id;\n\n    //test if extra comments have been loaded for this one\n    let extras = extraComments.find(obj => obj.id === comment.id && comment.kind !== 'more');\n    if (extras !== undefined) {                \n        extras = extras.replies;\n    } else {\n        extras = [];\n    }\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (extras.length > 0) {\n        replies = <CommentList comments={extras} author={author}/>;\n    } else if (comment.replies.length > 0) {\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    const getMore = () => {\n        getMoreComments(comment.id, comment.permalink);\n    }\n\n    //dont' currently support getting more top level comments, so don't show anything\n    if (comment.kind === 'more' && comment.permalink.length === 0) return null;\n\n    return (\n        <StyledComment single={single} stickied={comment.stickied}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{parseBodyText(comment.link_title)}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            { comment.kind === 'more' ? null : <span style={{color: 'gray'}}> {single ? '' : '|'} {single && currentSub !== 'user' ? comment.author+' | ' : ''} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span> }\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }} style={permalinkComment ? {backgroundColor: 'rgba(150,150,0,0.3)'} : {}}></div> }\n            { closed ? null : (\n                <CommentFooter>\n                    { comment.kind !== 'more' ? <a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a> : null }\n                    { single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }\n                    { comment.kind === 'more' ? <div onClick={getMore}>Load More</div> : null }\n                </CommentFooter>) }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const history = useHistory();\n\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSearch = useSelector(state => state.currentSearch);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;  \n\n    const onClickFlair = (flair) => () => {\n        //if already searching for this flair, don't need to do anything\n        if (decodeURI(currentSearch) === `flair_name:\"${flair}\"`) return;\n        \n        //base flair sorting on current post sort. I user is looking at new posts, search should use new, otherwise use top (relevant not needed for flair searching)\n        let sorting = currentSort === 'new' ? 'new' : 'top';\n        history.push(`/${currentSub}/${currentSort}?search=${`flair_name:\"${flair}\"`}&searchSort=${sorting}&searchSub=${true}&searchForSubs=${false}`);\n    }  \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport styled from 'styled-components';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport { parseBodyText } from '../functions/useful';\n\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst StyledComp = styled.div`\n    & > div#mainImageOuter {\n        position: relative;\n    }\n\n    & > div#caption {\n        text-align: center;\n        font-size: 0.9em;\n        margin-bottom: 5px;\n    }\n\n    & > div#thumbnails {\n        display: flex;\n        max-width: 100%;\n        justify-content: center;\n        align-items: center;\n        flex-flow: wrap;\n    }\n\n    & > div#thumbnails > img {\n        margin: 5px;\n    }\n\n    & > div#thumbnails > img:hover {\n        cursor: pointer;\n    }\n\n    & > div#thumbnails > img.selected {\n        border: 1px solid red;\n    }\n\n    & #galleryInner {\n        padding-top: 50%;\n    }\n    \n    & #galleryImgDiv {\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        text-align: center;\n        display: flex;\n        justify-content: center;\n    }\n\n    & #galleryImgDiv a {\n        align-self: center;\n        width: calc(100% - 100px);\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    & #galleryImgDiv img {\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n    & #galleryBack, & #galleryForward {\n        position: absolute;\n        top: 50%;\n        z-index: 3;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        background-color: black;\n        opacity: 0.6;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 2em;\n    }\n\n    & #galleryBack:hover, & #galleryForward:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    & #galleryBack {\n        transform: translate(0,-50%) rotate(90deg);\n        left: -15px;\n    }\n\n    & #galleryForward {\n        transform: translate(0,-50%) rotate(-90deg);\n        right: -15px;\n    }\n\n    & #galleryBack > svg, & #galleryForward > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    @media screen and (max-width: 700px) {\n        & #galleryBack:hover, & #galleryForward:hover {\n            background-color: black;\n        }\n    }\n`;\n\n//function to get the url based on an index, but if that index doesn't exist, it gets the next largest image.\nconst getURL = (arr, index) => {\n    let limit = 6;\n    while (true && limit > 0) {\n        if (arr[index] !== undefined) return parseBodyText(arr[index].u);\n        else index--;\n        limit--;\n    }\n}\n\nconst Gallery = ({data, extraData}) => {\n    let firstId = data ? Object.keys(data)[0] : '';\n    const [id, setId] = useState(firstId);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n    const level4 = useMediaQuery({ maxWidth: 960 });\n    const level5 = useMediaQuery({ maxWidth: 2560 });\n    let index = data ? Object.keys(data).indexOf(id) : 0;\n    let numberOfImages = data ? Object.keys(data).length : 0;\n    const [showSpinner, setShowSpinner] = useState(true);\n\n    if (!data) return <p>Post has been removed</p>;\n\n    let url = '';\n    if (level5) url = getURL(data[id].p, 5);\n    if (level4) url = getURL(data[id].p, 4);\n    if (isMobile) url = getURL(data[id].p, 3);\n    let fullUrl = parseBodyText(data[id].s.u);\n\n    let caption = `${index+1}/${numberOfImages}`;\n    let extraDataObj = extraData.items.find(obj => obj.media_id === id);\n    if (extraDataObj !== undefined) {\n        if (extraDataObj.caption !== undefined) caption += ' - Caption: ' + extraDataObj.caption;\n    }\n\n    const onClickThumb = (id) => () => {\n        setId(id);\n        setShowSpinner(true);\n    }\n\n    const next = () => {\n        let arr = Object.keys(data);\n        let index = arr.indexOf(id);\n        let next = index+1;\n        if (next >= arr.length) next = 0;\n        let nextId = arr[next];\n        setId(nextId);\n        setShowSpinner(true);\n    }\n\n    const previous = () => {\n        let arr = Object.keys(data);\n        let index = arr.indexOf(id);\n        let next = index-1;\n        if (next < 0) next = arr.length-1;\n        let nextId = arr[next];\n        setId(nextId);\n        setShowSpinner(true);\n    }\n\n    const onImageLoad = () => {\n        setShowSpinner(false);\n    }\n\n    return (\n        <StyledComp>\n            { caption.length > 0 ? <div id=\"caption\">{ caption }</div> : null }\n            <div id=\"mainImageOuter\">\n                <div id=\"galleryInner\">\n                    <div onClick={previous} id=\"galleryBack\"><FaChevronDown/></div>\n                    <div onClick={next} id=\"galleryForward\"><FaChevronDown/></div>\n                    { showSpinner ? <LoadingSpinner style={{position: 'absolute', left: 'calc(50% - 25px)', top: 'calc(50% - 50px)', zIndex: '0'}}/> : null }\n                    <div id=\"galleryImgDiv\">\n                        <a key={id} href={fullUrl} target=\"_blank\" rel=\"noopener noreferrer\"><img src={url} alt=\"Gallery Main\" onLoad={onImageLoad}/></a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"thumbnails\">\n            {\n                isMobile ? null : Object.values(data).map((obj, i) => {\n                    return <img key={obj.id+i} src={parseBodyText(obj.p[0].u)} onClick={onClickThumb(obj.id)} alt=\"Thumbnail\" className={id === obj.id ? 'selected' : ''}/>\n                })\n            }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Gallery;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledError = styled.div`\n    margin: 10px;\n    text-align: center;\n\n    h2 {\n        margin-top: 20px;\n    }\n\n    button {\n        border: 1px solid red;\n        background-color: black;\n        color: white;\n        font-size: 1.5em;\n        margin-top: 20px;\n    }\n`;\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({error: error.message});\n  }\n\n  resetError = () => {\n        this.setState({hasError: false});\n        this.props.history.push('/');\n    }\n\n  render() {\n    if (this.state.hasError) {\n        return (\n            <StyledError>\n                { this.props.history !== undefined ? <h2>Sorry, something went wrong.</h2> : <h2>This Component Could Not Be Loaded</h2> }\n                <div>Error Message: {this.state.error}</div>\n                { this.props.history !== undefined ? <button onClick={this.resetError}>Reset</button> : null }\n            </StyledError>\n        );\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport Gallery from './Gallery';\nimport Spoiler from './Spoiler';\nimport LoadingSpinner from './Styled/LoadingSpinner';\nimport ErrorBoundary from './ErrorBoundary';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    @media screen and (max-width: 700px) {\n        :hover {\n            background-color: black;\n        }\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const showContext = useSelector(state => state.showContext);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl, showContext]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed, media_metadata, is_gallery, gallery_data, spoiler} = post;\n\n    //check if post is a link to another post and make sure it goes there locally and not on a new page\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    let hasContext = comments[0] !== undefined ? comments[0].hasContext : false;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                <Spoiler spoiler={spoiler}>\n                    { bodyTag }\n                </Spoiler>\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> : null }\n            { permalinkUrl.length > 0 && hasContext ? <span> - <a href={`#/${currentSub}/comments/${currentPostId}/${permalinkUrl}/?context=10000`}>Show Context</a></span> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data) => {\n    body = parseLinks(body);\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    if (is_gallery) {\n        return <PostBody className=\"postDivBody\"><ErrorBoundary><Gallery data={media_metadata} extraData={gallery_data}/></ErrorBoundary></PostBody>\n    }\n\n    if (url.includes('v.redd.it')) {\n        let url = `https://www.reddit.com${permalink}?ref=share&ref_source=embed`;\n        bodyTag = <PostBody className=\"postDivBody\">\n                    <blockquote className=\"reddit-card\">\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n                    </blockquote>\n                  </PostBody>\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, subHeading='', onReload}) => {\n    return (\n        <div>\n            <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n            { subHeading.length > 0 ? <h3 style={{textAlign: 'center'}}>{decodeURIComponent(subHeading)}</h3> : null }\n        </div>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { MdSettings } from 'react-icons/md';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst TopButtons = styled.div`\n    display: flex;\n    \n    & > button:first-child {\n        padding: 0px;\n        border-right: 1px solid gray;\n        width: 60px;\n        font-size: 1.4em;\n    }\n\n    & > button > svg {\n        position: relative;\n        top: 3px;\n    }\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const [showSettings, setShowSettings] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n        setShowSettings(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    const onClickShowSettings = () => {\n        setShowSettings(true);\n    }\n\n    if (showSettings) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <Settings/>\n            </StyledSideMenu>\n        );\n    } else if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <TopButtons>\n                    <SavedButton onClick={onClickShowSettings}><MdSettings/></SavedButton>\n                    <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                </TopButtons>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nimport { getPostList, getComments, parseURL, parseSearch, parseFlair } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const currentContext = useSelector(state => state.showContext);\n    const setContext = (val) => dispatch({type: 'SET_SHOW_CONTEXT', payload: val});\n\n    const currentUser = useSelector(state => state.currentUser);\n    const setCurrentUser = (val) => dispatch({type: 'SET_USER', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl, user} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    let showContext = location.search === '?context=10000';\n\n    //load saved posts from local storage\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n    useEffect(() => {\n        let storedSaves = localStorage.getItem('saved');\n        storedSaves = storedSaves ? JSON.parse(storedSaves) : [];\n        setSaved(storedSaves);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);    \n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n        if (showContext !== currentContext) setContext(showContext);\n        if (user.length > 0 && user !== currentUser) setCurrentUser(user);\n        \n        //if moving from user list to post to post list, then need to make sure user is reset otherwise still displays user list\n        if (user.length === 0 && newSort.length > 0 && postId.length === 0) setCurrentUser('');\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        let subHeading = '';\n        if (currentSearchForSubs) heading = `Searching Subs: ${currentSearch}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs) subHeading = `Searching: ${decodeURI(currentSearch)}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs && currentSearch.includes('flair_name')) subHeading = `Searching Flair: ${parseFlair(decodeURI(currentSearch.replace('flair_name:', '')))}`;\n        if (currentSub === 'user') heading = `${currentUser}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} subHeading={subHeading} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{height: '100%', overflow: 'hidden'}}>\n                    <TopMenu onBackClick={onBackClick}/>\n                    <div style={{marginTop: '50px'}}></div>\n                    { getMainPage() }\n                </div>\n            </ErrorBoundary>\n        );\n    } else {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{display: 'flex', height: '100%'}}>\n                    <div>\n                        <SideMenu/>\n                    </div>\n                    <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                        { getMainPage() }\n                    </div>\n                </div>\n            </ErrorBoundary>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}