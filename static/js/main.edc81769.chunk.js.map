{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/TopMenu.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/PostLink.js","components/SubLink.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Comment.js","components/CommentList.js","components/Post.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","SideButton","Icon","checkIfSubbed","subs","currentSub","length","includes","SubList","dispatch","useDispatch","useSelector","state","currentSort","setSubs","val","type","payload","useState","editMode","setEditMode","newSub","setNewSub","useEffect","storedSubs","localStorage","getItem","JSON","parse","onDeleteSub","sub","newSubArr","filter","subName","setItem","stringify","addSubToStorage","arr","to","className","onClick","map","key","style","textTransform","placeholder","onChange","e","target","value","SortMenu","option","CommentSortMenu","commentSort","changeCommentSort","display","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","onSearch","push","onKeyPress","width","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","searchMenuOpen","subMenuOpen","sortMenuOpen","currentPostId","Fragment","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","noComments","searchForSubs","store","createStore","action","data","parseComment","comment","body_html","id","author","permalink","replies","score","parseBodyText","children","text","replace","parseBool","str","getMySubs","prepend","join","getPostList","a","loadMore","getState","setLatestPost","setPosts","setNoPosts","setNoMorePosts","url","parsedStr","split","fetch","response","json","error","console","log","batch","newPosts","post","media","oembed","html","kind","title","display_name","description","description_html","created","created_utc","subscribers","domain","body","selftext_html","num_comments","subreddit","stickied","thumbnail","noMore","getComments","setComments","setNoComments","setPostDetails","obj","PostTitle","PostTextGroup","PostDetails","PostExpand","StyledPostLink","PostThumbnail","PostComments","PostBody","React","memo","onClickLink","expanded","setExpanded","undefined","dateString","formatDistanceStrict","Date","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","match","src","alt","openBtn","maxWidth","href","rel","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","toLowerCase","LoadingSpinner","PostList","textAlign","hide","position","top","hasMore","margin","marginBottom","dataLength","next","loader","scrollableTarget","scrollThreshold","StyledComment","CommentClose","span","CommentAuthor","original","CommentFooter","parseBody","newBody","redditMatches","forEach","Comment","closed","setClosed","color","StyledCommentList","CommentList","StyledPost","ScrollButton","parsePostBody","bodyTag","Post","isMobile","useMediaQuery","find","updatePostDetails","window","scrollTo","shortUrl","substr","commentDiv","document","querySelector","i","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","ReloadButton","Header","heading","onReload","StyledSideMenu","SideMenu","Page","location","scrollPos","setScrollPos","currentSearchForSubs","parts","newSort","postId","parseURL","pathname","searchStr","parseSearch","setCurrentPostId","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edc81769.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(false);\n    const [newSub, setNewSub] = useState('');\n\n    useEffect(() => {\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length === 0) setEditMode(true);\n        setSubs(storedSubs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const addCurrentSub = () => {\n        addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                subs.map(sub => {\n                    return (\n                        <ButtonGroup key={'sub-'+sub}>\n                            <NavLink to={`/${sub}/${currentSort}`} className={sub === currentSub ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub}</NavLink>\n                            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub)}><FaTrashAlt/></SideButton> : null }\n                        </ButtonGroup>\n                    )\n                })\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub) ? <Button onClick={addCurrentSub}>Add Current Sub</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub) => {\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={search} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div:last-child,  & > div:nth-last-child(2){\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: 250px;\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton onClick={onClickSort} selected={sortMenuOpen}>Sort</MenuButton>\n                <MenuButton onClick={onClickSearch} selected={searchMenuOpen}>Search</MenuButton>\n            </StyledTopMenu>\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, sortMenuOpen: false, subMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, sortMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n        default: return state;\n    }\n};","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (comment) => {\n    let {body_html, id, author, permalink, replies, score} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        //console.log(comment);\n        return parseComment(comment.data);\n    });\n    \n    return {body_html, id, author, permalink, replies, score};\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n    }    \n\n    return {sub, newSort, postId};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    let search = searchStr.match(/search=([a-zA-Z0-9% ]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ');\n    \n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (!loadMore) {\n        setPosts([]);\n        setNoPosts(false);\n        setNoMorePosts(false);\n    }\n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=t3_${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                if (searchForSubs) url += `&after=t5_${latestPost}`;\n                else url += `&after=t3_${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }\n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].id);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/`;\n    \n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, author, created_utc, permalink} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj.data);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, permalink});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    updatePostDetails\n}","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = post.body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span></PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink> - <span><a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? bodyContent : null }\n                        <div>\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com/${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    //make sure any links within the body open in a new tab\n    let description = sub.description.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n\n    //but links to other reddit subs can be kept on this website\n    description = description.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#'); \n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n        localStorage.setItem('subs', JSON.stringify(newSubArr));\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;    \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink}/>\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid red;\n    border-top: 1px solid red;\n    margin-bottom: 0px;\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.span`\n    ${props => props.original ? `\n        color: #059afe; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst Comment = ({comment, author}) => {  \n    const [closed, setClosed] = useState(false);\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (comment.replies.length > 0){\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseBody(comment.body_html);\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }\n\n    return (\n        <StyledComment>\n            <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose>\n            <CommentAuthor original={comment.author === author}>{comment.author}</CommentAuthor>\n            <span style={{color: 'gray'}}> | {comment.score}</span>\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }}></div> }\n            { closed ? null : <CommentFooter><a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a></CommentFooter> }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nconst parseBody = (body) => {    \n    //make sure any links within the body open in a new tab\n    let newBody = body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit are adjusted\n    newBody = newBody.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n\n    //but links to other reddit subs can be kept on this website\n    newBody = newBody.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');\n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = newBody.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        newBody = newBody.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n    \n    return newBody; \n}\n\nexport default Comment;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nimport { parseBodyText, updatePostDetails, getComments } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst Post = () => {\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values\n        getComments();\n    }, [commentSort, currentPostId]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink} = post;  \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails>{author} | {dateString} | <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Go to URL ({shortUrl})</a></PostDetails>\n                <PostDetails><a href={`https://www.reddit.com/${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a></PostDetails>\n                { bodyTag }\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nconst parsePostBody = (body, url, media) => {\n    //make sure any links within the body open in a new tab\n    body = body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit users are adjusted\n    body = body.replace(/href=\"\\/u/g, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    body = body.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');    \n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    return bodyTag;\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SideMenu = () => {\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <StyledSideMenu>\n            <SearchMenu/>\n            { currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n            <SubList/>\n        </StyledSideMenu>\n    );\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\n\nimport { getPostList, getComments, parseURL, parseSearch } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId} = parseURL(location.pathname); \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;\n        // if (currentPostId.length > 0) return;\n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList();\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        return (\n            <React.Fragment>\n                <Header heading={currentSearchForSubs ? `Searching: ${currentSearch}` : currentSub} onReload={onReload}/>\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <div style={{height: '100%', overflow: 'hidden'}}>\n                <TopMenu onBackClick={onBackClick}/>\n                <div style={{marginTop: '50px'}}></div>\n                { getMainPage() }\n            </div>\n        );\n    } else {\n        return (\n            <div style={{display: 'flex', height: '100%'}}>\n                <div>\n                    <SideMenu/>\n                </div>\n                <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                    { getMainPage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}