{"version":3,"sources":["components/LoadingSpinner.js","shared.js","components/PostLink.js","components/PostList.js","components/Comment.js","components/Comments.js","components/SortButtons.js","components/Post.js","components/Header.js","components/SubList.js","components/SideBar.js","components/TopMenu.js","App.js","serviceWorker.js","index.js"],"names":["LoadingSpinner","react_default","a","createElement","className","Shared","getTimeString","milliseconds","created","Moment","today","difference","duration","diff","years","months","days","hours","minutes","PostLink","props","post","dateString","thumbnail","src","alt","test","body","replace","bodyTag","dangerouslySetInnerHTML","__html","bodyHasImage","url","match","media","length","openBtn","onClick","e","preventDefault","bodyDiv","target","parentNode","querySelector","classList","toggle","contains","innerText","stickied","Link","to","concat","subreddit","id","title","href","rel","domain","author","num_comments","permalink","PostList","_ref","posts","src_components_LoadingSpinner","map","src_components_PostLink","key","Comment","_this$props","this","comment","replies","components_Comments","comments","body_html","commentDiv","score","Component","Comments","src_components_Comment","SortButtons","currentSort","sortOptions","1","2","sortList","option","i","toLowerCase","Post","_props$postDetails","postDetails","commentSortMethod","shortUrl","substr","src_components_SortButtons","Header","heading","onReload","pjson","require","SubList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeNewSub","setState","newSub","value","onAddNewSub","_this$state","state","subs","includes","push","localStorage","setItem","JSON","stringify","onDeleteSub","sub","filter","subName","onToggleEditMode","editMode","_this2","startPoint","_this$state2","link","NavLink","activeClassName","type","placeholder","onChange","getItem","parse","SideBar","onSubClick","onSortClick","src_components_SubList","TopMenu","onSubsClick","onBackClick","Route","exact","path","render","Page","checkUrlAndUpdate","onChangeSortMethod","sortMethod","hideSidebar","onChangeCommentSortMethod","onBack","history","goBack","document","add","showSidebar","remove","getPostList","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","error","children","oembed","parseBodyText","html","created_utc","selftext_html","t0","console","log","stop","_x","apply","arguments","getPostDetails","_ref2","_callee2","_data$0$data$children","_url","_context2","obj","parseComment","_x2","postId","src_components_SideBar","src_components_TopMenu","components_Header","Switch","src_components_PostList","assign","src_components_Post","text","_this3","force","undefined","location","pathname","parts","split","postInfo","find","prevProps","prevState","App","HashRouter","component","Boolean","window","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9786f149.chunk.js","sourcesContent":["import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loadingSpinner\"></div>\n    );\n};\n\nexport default LoadingSpinner;","import Moment from 'moment';\n\nconst Shared = {\n    getTimeString: (milliseconds) => {\n        //create a string showing how long ago this was posted.\n        //could use Moment.fromNow(), but I prefer a more accurate time\n        let created = Moment(milliseconds);\n        let today = Moment();\n        let difference = Moment.duration(today.diff(created));\n\n        let dateString;\n        if (difference.years() === 1) dateString = difference.years() + ' year ago';\n        else if (difference.years() > 1) dateString = difference.years() + ' years ago';\n        else if (difference.months() === 1) dateString = difference.months() + ' month ago';\n        else if (difference.months() > 1) dateString = difference.months() + ' months ago';\n        else if (difference.days() === 1) dateString = difference.days() + ' day ago';\n        else if (difference.days() > 1) dateString = difference.days() + ' days ago';\n        else if (difference.hours() === 1) dateString = difference.hours() + ' hour ago';\n        else if (difference.hours() > 1) dateString = difference.hours() + ' hours ago';\n        else if (difference.minutes() === 1) dateString = difference.minutes() + ' minute ago';\n        else if (difference.minutes() > 1) dateString = difference.minutes() + ' minutes ago';\n        else dateString = 'Now';\n        \n        return dateString;\n    },\n};\n\nexport default Shared;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PostLink.css';\nimport Shared from '../shared';\n\nconst PostLink = (props) => {\n    const {post} = props;\n    \n    //get relative time string\n    let dateString = Shared.getTimeString(post.created*1000);\n            \n    //decide whether to show a thumbnail    \n    let thumbnail = (\n        <div className=\"postThumbnail\">\n            <img src={post.thumbnail} alt=\"Thumbnail for post\" />\n        </div>\n    )\n\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === false){\n        thumbnail = <span></span>;\n    }\n\n    //toggle post body text open and closed\n    function toggleBodyOpen(e){\n        e.preventDefault();\n        const postDiv = e.target.parentNode.parentNode.parentNode;\n        const bodyDiv = postDiv.querySelector('.postLinkBody');\n\n        bodyDiv.classList.toggle('open');\n        if (bodyDiv.classList.contains('open')) e.target.innerText = '[ - ] ';\n        else e.target.innerText = '[ + ] ';\n    }\n    \n    //if there's a link to an image, replace that link with an img tag (maybe remove?)\n    // const imageLinksInBodyFull = post.body.match(/<a href=.+?(\\.(png|jpg|jpeg|bmp)).+?(<\\/a>)/g);\n    // if (imageLinksInBodyFull){\n    //     imageLinksInBodyFull.forEach(linkTag => {\n    //         const imageLinkInBody = linkTag.match(/\"http([a-zA-Z0-9\\W]+(.png|.jpg|.jpeg))\"/)[0].replace(/\"/g,'');\n    //         post.body = post.body.replace(linkTag, '<img src=\"'+imageLinkInBody+'\"/>');\n    //     });\n    // }\n    \n    //make sure any links within the body open in a new tab\n    post.body = post.body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //decide whether to show image preview in body\n    let bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.body}}></div>;\n    let bodyHasImage = false;\n    if (post.url.match(/.jpg$/)){\n        bodyTag = (<div className=\"postLinkBody\">\n            <img src={post.url} alt=\"Preview user linked to\" />\n        </div>);\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.media}}></div>;\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show an open button for post body\n    let openBtn = (<span> - <span className=\"postLinkOpen\" onClick={toggleBodyOpen}>[ + ] </span></span>);\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = <span></span>;\n    \n    //check if sticked and add another class\n    let className = 'postLink';\n    if (post.stickied) className += ' stickied';\n    \n    return (\n        <div className={className}>\n            {thumbnail}\n            <div className=\"postLinkContent\">\n                <Link to={`${post.subreddit}/${post.id}`} className=\"postLinkTitle\">{post.title}</Link>\n                <div className=\"postLinkMiddle\">\n                    <a className=\"postLinkDomain\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.domain} - </a>\n                    <span className=\"postLinkTime\">{dateString} - </span>\n                    <span className=\"postLinkAuthor\">{post.author}</span>\n                    {openBtn}\n                </div>\n                {bodyTag}\n                <div className=\"postLinkFooter\">\n                    <Link to={`${post.subreddit}/${post.id}`} className=\"postLinkComments\">{post.num_comments} Comments </Link>\n                    - <a className=\"postLinkReddit\" href={'https://www.reddit.com'+post.permalink} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PostLink;\n\n\n\n/*\n\nscore: data.score,\n*/","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\nimport PostLink from './PostLink';\nimport './PostList.css';\n\nconst PostList = ({posts}) => {    \n    if (posts && posts.length === 0){\n        return (\n            <LoadingSpinner />\n        );\n    } else if (posts) {\n        return (\n            <div className=\"postListDiv\">\n                {\n                    posts.map(post => {\n                        return <PostLink key={post.id} post={post}/>\n                    })\n                }\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"postListDiv\">No Posts Found</div>\n        )\n    }\n};\n\nexport default PostList;","import React, {Component} from 'react';\nimport Comments from './Comments';\nimport './Comment.css';\n\nclass Comment extends Component {\n    render(){\n        let {comment, author} = this.props;\n        \n        //if there are any replies to this comment, create a new Comments object (will work recursively)\n        let replies = \"\";\n        if (comment.replies.length > 0){\n            replies = <Comments comments={comment.replies} author={author}/>;\n        }\n        \n        function toggleCommentClose(e){\n            e.preventDefault();\n            const commentDiv = e.target.parentNode.parentNode;\n            commentDiv.classList.toggle('closed');\n            if (commentDiv.classList.contains('closed')) e.target.innerText = '[ + ] ';\n            else e.target.innerText = '[ - ] ';\n        }\n        \n        //make sure any links within the body open in a new tab\n        comment.body_html = comment.body_html.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n        \n        //make sure links to reddit are adjusted\n        comment.body_html = comment.body_html.replace(/href=\"\\/u/, 'href=\"https://www.reddit.com/$1');\n        \n        //but links to other reddit subs can be kept on this website\n        comment.body_html = comment.body_html.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/, 'href=\"#');\n        \n        return (\n            <div className=\"commentDiv\">\n                <div className=\"commentHeader\">\n                    <span className=\"commentClose\" onClick={toggleCommentClose}>[ - ] </span>\n                    <span className={comment.author === author ? \"commentAuthor OP\" : \"commentAuthor\"}>{comment.author}</span><span className=\"commentScore\"> | {comment.score}</span>\n                </div>\n                \n                <div className=\"commentText\" dangerouslySetInnerHTML={{ __html: comment.body_html }}></div>\n                \n                <div className=\"commentFooter\">\n                    <a className=\"commentPermalink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"http://www.reddit.com\"+comment.permalink}>Permalink</a>\n                </div>\n                {replies}\n            </div>\n        );\n    }\n}\n// const Comment = (props) => {\n// \n// }\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Comments = ({comments, author}) => {\n    if (comments && comments.length > 0) {\n        return (\n            <div className=\"comments\">\n            {\n                comments.map(comment => {\n                    if (!comment.author) return null;\n                    return <Comment key={comment.id} comment={comment} author={author} />\n                })\n            }\n            </div>\n        );\n    } else if (comments) {\n        return (\n            <div></div>\n        );\n    } else if (!comments){\n        return (\n            // <div>Loading Comments...</div>\n            <LoadingSpinner />\n        );\n    }\n}\n\nexport default Comments;","import React from 'react';\nimport './SortButtons.css';\n\nconst SortButtons = ({onClick, currentSort, sortList}) => {\n    let sortChoices = {\n        1: ['Hot','New','Rising','Controversial','Top'],\n        2: ['Best','New','Top','Controversial','Old', 'Q&A'],\n    }\n    let sortOptions = sortChoices[sortList];\n    \n    return (\n        <div className=\"sortButtons\">\n            {\n                sortOptions.map((option,i) => {\n                    let className = 'sortButton';\n                    if (option.toLowerCase() === currentSort){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'best' && currentSort === 'confidence'){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'q&a' && currentSort === 'qa'){\n                        className += ' active';\n                    }\n                    return <span key={i} className={className} onClick={onClick}>{option.toLowerCase()}</span>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SortButtons;","import React from 'react';\nimport Comments from './Comments';\nimport SortButtons from './SortButtons';\nimport Shared from '../shared';\nimport './Post.css';\n\nconst Post = (props) => {\n    let {title, body, comments, url, media, author, created} = props.postDetails;\n    let {currentSort, commentSortMethod} = props;\n    \n    //get relative time string\n    let dateString = Shared.getTimeString(created*1000);\n    \n    //make sure any links within the body open in a new tab\n    body = body.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //make sure links to reddit are adjusted\n    body = body.replace(/href=\"\\/u/, 'href=\"https://www.reddit.com/$1');\n    \n    //but links to other reddit subs can be kept on this website\n    body = body.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/, 'href=\"#');\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <div dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></div>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <img src={url} alt=\"Preview of content\"/>\n    }\n    \n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n    \n    //check for media embed and replace body with this\n    if (media && media.length > 0){\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <div dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></div>\n    }\n        \n    return (\n        <div>\n            {\n                title.length === 0 ? <h1 className=\"loading\">Loading...</h1> : (\n                    <div className=\"postDiv\">\n                        <h1>{title}</h1>\n                        <div className=\"postMiddle\">\n                            <span>{author}</span>\n                            <span className=\"postTime\"> | {dateString}</span>\n                            <a className=\"postGoToURL\" href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>\n                        </div>\n                        {bodyTag}\n                        {/* <hr/> */}\n                        <SortButtons onClick={commentSortMethod} currentSort={currentSort} sortList={2}/>\n                        <hr/>\n                        <Comments comments={comments} author={author} />\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 className=\"subHeader\">{heading} <span className=\"reloadButton\" onClick={onReload}>&#8635;</span></h1>\n    );\n};\n\nexport default Header;","import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './SubList.css';\nlet pjson = require('../../package.json');\n\nclass SubList extends Component {\n// const SubList = (props) => {\n    constructor(){\n        super();\n        this.state = {\n            subs: [],\n            newSub: '',\n            editMode: false\n        }\n    }\n    \n    render(){\n        let props = this.props;\n        let startPoint = pjson.startPoint;\n        //temp sub list (maybe change to browser storage?)\n        const {subs, newSub} = this.state;\n        \n        return (\n            <div className=\"subLinks\">\n                {\n                    subs.map((sub,i) => {\n                        const link = startPoint+'/'+sub;\n                        return (\n                            <div className=\"subContainer sideBarRow\" key={i}>\n                                <NavLink className=\"navLink\" activeClassName=\"active\" to={link} onClick={props.onClick}>\n                                    {sub}\n                                </NavLink>\n                                {\n                                    this.state.editMode ? <button className=\"deleteSubBtn\" onClick={this.onDeleteSub(sub)}><div>+</div></button> : null \n                                }\n                            </div>\n                        )\n                    })\n                }\n                {\n                    this.state.editMode ? (\n                        <div className=\"newSubDiv\">\n                            <input className=\"newSubInput sideBarRow\" type=\"text\" placeholder=\"New Sub\" onChange={this.onChangeNewSub} value={newSub}/>\n                            <button className=\"newSubBtn sideBarRow\" onClick={this.onAddNewSub}>Add</button>\n                        </div>\n                    ) : null\n                }\n                <img className=\"editSubIcon\" src=\"edit-solid.svg\" onClick={this.onToggleEditMode}/>\n            </div>\n        );\n    }\n    \n    componentDidMount(){\n        // const subs = ['PSVR','PS4','Apple','iPhone','NoMansSkyTheGame','Minecraft','PS4Deals','PS4Dreams','FirewallZeroHour'];\n        let subs = localStorage.getItem('subs');\n        subs = subs ? JSON.parse(subs) : [];\n        this.setState({subs});\n    }\n    \n    onChangeNewSub = (e) => {\n        this.setState({newSub: e.target.value});\n    }\n    \n    onAddNewSub = () => {\n        const {subs, newSub} = this.state;\n        if (subs.includes(newSub)) return this.setState({newSub: ''});\n        subs.push(newSub);\n        this.setState({subs, newSub:''});\n        localStorage.setItem('subs', JSON.stringify(subs));\n    }\n    \n    onDeleteSub = (sub) => () => {\n        const subs = this.state.subs.filter(subName => subName !== sub);\n        this.setState({subs});\n        localStorage.setItem('subs', JSON.stringify(subs));\n    }\n    \n    onToggleEditMode = () => {\n        this.setState({editMode: !this.state.editMode});\n    }\n};\n\nexport default SubList;","import React from 'react';\nimport './SideBar.css';\nimport SubList from './SubList';\nimport SortButtons from './SortButtons';\n\nconst SideBar = ({onSubClick, onSortClick, currentSort}) => {\n    return (\n        <div className=\"sidebar\">\n            <h3>Sort By</h3>\n            <SortButtons onClick={onSortClick} currentSort={currentSort} sortList={1}/>\n            <h3>Subs</h3>\n            <SubList onClick={onSubClick}/>\n        </div>\n    );\n};\n\nexport default SideBar;","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport './TopMenu.css';\n\nconst TopMenu = ({onSubsClick, onBackClick}) => {\n    return (\n        <div className=\"topMenu\">\n            <span className=\"topMenuBtn\" onClick={onSubsClick}>Subs</span>\n            <Route exact path={\"/:sub/:post\"} render={props => <span className=\"topMenuBtn\" onClick={onBackClick}>Back</span>} />\n        </div>\n    );\n};\n\nexport default TopMenu;","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideBar from './components/SideBar';\nimport TopMenu from './components/TopMenu';\nconst pjson = require('../package.json');\n\nclass Page extends Component {\n    constructor(){\n        super();\n        this.state = {\n            sub: '',\n            postId: '',\n            sortMethod: 'hot',\n            commentSortMethod: 'new',\n            posts: [],\n            postDetails: {title: '', body: '', id: '', comments: []}\n        };\n    }\n    \n    render(){\n        let startPoint = pjson.startPoint;\n        return (\n            <div>\n                <SideBar onSubClick={this.hideSidebar} onSortClick={this.onChangeSortMethod} currentSort={this.state.sortMethod}/>\n                <div className=\"pageContent\">\n                    <TopMenu onSubsClick={this.showSidebar} onBackClick={this.onBack}/>\n                    <Header heading={this.state.sub} onReload={this.onReload}/>\n                    <Switch>\n                        <Route exact path={startPoint+'/'} render={props => <PostList {...props} posts={this.state.posts}/>} />\n                        <Route exact path={startPoint+'/:sub'} render={props => <PostList {...props} posts={this.state.posts}/>} />\n                        <Route exact path={startPoint+\"/:sub/:post\"} render={props => <Post {...props} postDetails={this.state.postDetails} commentSortMethod={this.onChangeCommentSortMethod} currentSort={this.state.commentSortMethod} />} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n    \n    onReload = () => {\n        this.checkUrlAndUpdate(true);\n    }\n    \n    onChangeSortMethod = (e) => {\n        let sortMethod = e.target.innerText.toLowerCase();\n        this.setState({sortMethod});\n        this.hideSidebar();\n    }\n    \n    onChangeCommentSortMethod = (e) => {\n        let commentSortMethod = e.target.innerText.toLowerCase();\n\n        switch(commentSortMethod){\n            case 'best': this.setState({commentSortMethod:'confidence'}); break;\n            case 'q&a': this.setState({commentSortMethod:'qa'}); break;\n            default: this.setState({commentSortMethod}); break;\n        }\n    }\n    \n    onBack = () => {\n        this.props.history.goBack();\n    }\n    \n    hideSidebar = () => {\n        let sidebar = document.querySelector('.sidebar');\n        sidebar.classList.add('hidden');\n        let page = document.querySelector('.pageContent');\n        page.classList.add('active');\n    }\n    \n    showSidebar = () => {\n        let sidebar = document.querySelector('.sidebar');\n        sidebar.classList.remove('hidden');\n        let page = document.querySelector('.pageContent');\n        page.classList.remove('active');\n    }\n    \n    parseBodyText(text){\n        text ? text = text\n                        .replace(/&lt;/g,'<')\n                        .replace(/&gt;/g,'>')\n                        .replace(/&amp;#39;/g,\"'\")\n                        .replace(/&amp;quot;/g,'\"')\n                        .replace(/&amp;/g,\"&\")\n                        .replace(/&#x200B;/g,' ')\n                         : text = '';\n        return text;\n    }\n\n    getPostList = async (sub) => {\n        if (sub.length > 0) sub = 'r/'+sub;\n        \n        try {\n            let url = 'https://www.reddit.com/'+sub+'/'+this.state.sortMethod+'/.json';\n            if (sub.length === 0) url = 'https://www.reddit.com/.json';\n\n            let response = await fetch(url);\n            let data = await response.json();\n\n            if (data.error){\n                this.setState({posts: null});\n            } else {\n                if (data && data.data && data.data.children){\n                    let posts = data.data.children.map(post => {\n                        const data = post.data;\n\n                        let media = data.media;\n                        if (media && media.oembed){\n                            media = this.parseBodyText(media.oembed.html);\n                        } else {\n                            media = '';\n                        }\n                        \n                        return {\n                            created: data.created_utc,\n                            author: data.author,\n                            domain: data.domain,\n                            title: this.parseBodyText(data.title),\n                            id: data.id,\n                            body: this.parseBodyText(data.selftext_html),\n                            num_comments: data.num_comments,\n                            score: data.score,\n                            subreddit: data.subreddit,\n                            stickied: data.stickied,\n                            url: data.url,\n                            thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                            permalink: data.permalink,\n                            media: media\n                        };\n                    });\n                    \n                    if (posts.length === 0) posts = null;\n                    this.setState({posts});\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            this.setState({posts:null});\n        }\n    };\n    \n    parseComment(comment){\n        let {body_html, id, author, permalink, replies, score} = comment;\n        body_html = this.parseBodyText(body_html);\n        \n        replies = typeof replies === 'object' ? replies.data.children : [];\n        \n        replies = replies.map(comment => {\n            //console.log(comment);\n            return this.parseComment(comment.data);\n        });\n        \n        return {body_html, id, author, permalink, replies, score};\n    }\n    \n    getPostDetails = async (url) => {\n        try {\n            let response = await fetch('https://www.reddit.com/r/'+url+'.json?sort='+this.state.commentSortMethod);\n            let data = await response.json();\n            \n            if (data.error){\n                this.setState({postDetails: {title: 'Not Found', body: '', id: ''}});\n            } else {\n                let {title, selftext_html, id, url, media, author, created_utc} = data[0].data.children[0].data;\n\n                let comments = data[1].data.children.map(obj => {\n                    return this.parseComment(obj.data);\n                });\n                \n                if (media && media.oembed){\n                    media = this.parseBodyText(media.oembed.html);\n                } else {\n                    media = '';\n                }\n\n                //if this exists, replace &lt etc with proper symbols, otherwise set to empty string\n                selftext_html = this.parseBodyText(selftext_html);\n                this.setState({postDetails: {title, body: selftext_html, id, url, media, comments, author, created: created_utc}});\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    checkUrlAndUpdate(force = false){\n        let startPoint = pjson.startPoint;\n        let url = this.props.location.pathname.replace(startPoint,'').replace('/','');\n        let parts = url.split('/');\n\n        if (parts.length === 1){\n            let sub = parts[0];\n            //on sub, so get post list\n            if (sub.toLowerCase() !== this.state.sub.toLowerCase() || force){\n                this.setState({sub: sub, posts:[]});\n                this.getPostList(url);\n            }\n        } else if (parts.length === 2){\n            let sub = parts[0];\n            let postId = parts[1];\n\n            if (sub.toLowerCase() !== this.state.sub.toLowerCase() || force){\n                this.setState({sub, posts: []});\n                this.getPostList(sub);\n            }\n            \n            if (postId.toLowerCase() !== this.state.postId.toLowerCase() || force){\n                //check if post details already exists within the current post array, and if so, use that for quicker rendering\n                let posts = this.state.posts || [];\n                let postInfo = posts.find(post => post.id === postId);\n                if (postInfo){\n                    this.setState({sub, postId, postDetails: postInfo});\n                } else {\n                    this.setState({sub, postId, postDetails: {title:'', body:'', id:''}});\n                }\n                this.getPostDetails(`${sub}/${postId}`);\n            }\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        let force = false;\n        if (prevState.sortMethod !== this.state.sortMethod) force = true;\n        if (prevState.commentSortMethod !== this.state.commentSortMethod) force = true;\n        this.checkUrlAndUpdate(force);        \n    }\n    \n    componentDidMount(){\n        this.hideSidebar();\n        this.checkUrlAndUpdate(true);\n    }\n}\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path='/' component={Page} />\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}