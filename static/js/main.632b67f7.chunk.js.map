{"version":3,"sources":["components/SubList.js","components/LoadingSpinner.js","shared.js","components/PostLink.js","components/PostList.js","components/Comment.js","components/Comments.js","components/SortButtons.js","components/Post.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["pjson","require","SubList","props","startPoint","react_default","a","createElement","className","map","sub","i","link","NavLink","activeClassName","key","to","LoadingSpinner","Shared","getTimeString","milliseconds","created","Moment","today","difference","duration","diff","years","months","days","hours","minutes","PostLink","post","dateString","thumbnail","src","alt","test","bodyTag","dangerouslySetInnerHTML","__html","body","bodyHasImage","url","match","media","length","openBtn","onClick","e","preventDefault","bodyDiv","target","parentNode","querySelector","classList","toggle","contains","innerText","stickied","Link","concat","subreddit","id","title","href","rel","domain","author","num_comments","permalink","PostList","_ref","posts","src_components_LoadingSpinner","src_components_PostLink","Comment","_this$props","this","comment","replies","components_Comments","comments","commentDiv","score","body_html","Component","Comments","src_components_Comment","SortButtons","currentSort","sortOptions","1","2","sortList","option","toLowerCase","Post","_props$postDetails","postDetails","commentSortMethod","shortUrl","substr","components_SortButtons","Header","heading","onReload","Page","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkUrlAndUpdate","onChangeSortMethod","sortMethod","setState","onChangeCommentSortMethod","getPostList","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","state","fetch","sent","json","error","children","oembed","parseBodyText","html","created_utc","selftext_html","t0","console","log","stop","_x","apply","arguments","getPostDetails","_ref2","_callee2","_data$0$data$children","_url","_context2","obj","parseComment","_x2","postId","_this2","src_components_SubList","components_Header","Switch","Route","exact","path","render","src_components_PostList","assign","src_components_Post","text","replace","_this3","force","undefined","location","pathname","parts","split","postInfo","find","prevProps","prevState","App","HashRouter","component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.632b67f7.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './SubList.css';\nlet pjson = require('../../package.json');\n\nconst SubList = (props) => {\n    let startPoint = pjson.startPoint;\n    //temp sub list (maybe change to browser storage?)\n    const subs = [\n        'PSVR','PS4','Apple','iPhone','NoMansSkyTheGame','Minecraft','PS4Deals'\n    ];\n    \n    return (\n        <div className=\"subLinks\">\n            {\n                subs.map((sub,i) => {\n                    const link = startPoint+'/'+sub;\n                    return <NavLink className=\"navLink\" activeClassName=\"active\" key={i} to={link}>{sub}</NavLink>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SubList;","import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loadingSpinner\"></div>\n    );\n};\n\nexport default LoadingSpinner;","import Moment from 'moment';\n\nconst Shared = {\n    getTimeString: (milliseconds) => {\n        //create a string showing how long ago this was posted.\n        //could use Moment.fromNow(), but I prefer a more accurate time\n        let created = Moment(milliseconds);\n        let today = Moment();\n        let difference = Moment.duration(today.diff(created));\n\n        let dateString;\n        if (difference.years() === 1) dateString = difference.years() + ' year ago';\n        else if (difference.years() > 1) dateString = difference.years() + ' years ago';\n        else if (difference.months() === 1) dateString = difference.months() + ' month ago';\n        else if (difference.months() > 1) dateString = difference.months() + ' months ago';\n        else if (difference.days() === 1) dateString = difference.days() + ' day ago';\n        else if (difference.days() > 1) dateString = difference.days() + ' days ago';\n        else if (difference.hours() === 1) dateString = difference.hours() + ' hour ago';\n        else if (difference.hours() > 1) dateString = difference.hours() + ' hours ago';\n        else if (difference.minutes() === 1) dateString = difference.minutes() + ' minute ago';\n        else if (difference.minutes() > 1) dateString = difference.minutes() + ' minutes ago';\n        else dateString = 'Now';\n        \n        return dateString;\n    },\n};\n\nexport default Shared;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PostLink.css';\nimport Shared from '../shared';\n\nconst PostLink = (props) => {\n    const {post} = props;\n    \n    //get relative time string\n    let dateString = Shared.getTimeString(post.created*1000);\n            \n    //decide whether to show a thumbnail    \n    let thumbnail = (\n        <div className=\"postThumbnail\">\n            <img src={post.thumbnail} alt=\"Thumbnail for post\" />\n        </div>\n    )\n\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === false){\n        thumbnail = <span></span>;\n    }\n\n    //toggle post body text open and closed\n    function toggleBodyOpen(e){\n        e.preventDefault();\n        const postDiv = e.target.parentNode.parentNode.parentNode;\n        const bodyDiv = postDiv.querySelector('.postLinkBody');\n\n        bodyDiv.classList.toggle('open');\n        if (bodyDiv.classList.contains('open')) e.target.innerText = '[ - ] ';\n        else e.target.innerText = '[ + ] ';\n    }\n    \n    //if there's a link to an image, replace that link with an img tag (maybe remove?)\n    // const imageLinksInBodyFull = post.body.match(/<a href=.+?(\\.(png|jpg|jpeg|bmp)).+?(<\\/a>)/g);\n    // if (imageLinksInBodyFull){\n    //     imageLinksInBodyFull.forEach(linkTag => {\n    //         const imageLinkInBody = linkTag.match(/\"http([a-zA-Z0-9\\W]+(.png|.jpg|.jpeg))\"/)[0].replace(/\"/g,'');\n    //         post.body = post.body.replace(linkTag, '<img src=\"'+imageLinkInBody+'\"/>');\n    //     });\n    // }\n    \n    //decide whether to show image preview in body\n    let bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.body}}></div>;\n    let bodyHasImage = false;\n    if (post.url.match(/.jpg$/)){\n        bodyTag = (<div className=\"postLinkBody\">\n            <img src={post.url} alt=\"Preview user linked to\" />\n        </div>);\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        bodyTag = <div className=\"postLinkBody\" dangerouslySetInnerHTML={{__html: post.media}}></div>;\n        bodyHasImage = true;\n    }\n    \n    //decide whether to show an open button for post body\n    let openBtn = (<span> - <span className=\"postLinkOpen\" onClick={toggleBodyOpen}>[ + ] </span></span>);\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = <span></span>;\n    \n    //check if sticked and add another class\n    let className = 'postLink';\n    if (post.stickied) className += ' stickied';\n    \n    return (\n        <div className={className}>\n            {thumbnail}\n            <div className=\"postLinkContent\">\n                <Link to={`${post.subreddit}/${post.id}`} className=\"postLinkTitle\">{post.title}</Link>\n                <div className=\"postLinkMiddle\">\n                    <a className=\"postLinkDomain\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.domain} - </a>\n                    <span className=\"postLinkTime\">{dateString} - </span>\n                    <span className=\"postLinkAuthor\">{post.author}</span>\n                    {openBtn}\n                </div>\n                {bodyTag}\n                <div className=\"postLinkFooter\">\n                    <Link to={`${post.subreddit}/${post.id}`} className=\"postLinkComments\">{post.num_comments} Comments </Link>\n                    - <a className=\"postLinkReddit\" href={'https://www.reddit.com'+post.permalink} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PostLink;\n\n\n\n/*\n\nscore: data.score,\n*/","import React from 'react';\nimport LoadingSpinner from './LoadingSpinner';\nimport PostLink from './PostLink';\nimport './PostList.css';\n\nconst PostList = ({posts}) => {    \n    if (posts && posts.length === 0){\n        return (\n            <LoadingSpinner />\n        );\n    } else if (posts) {\n        return (\n            <div className=\"postListDiv\">\n                {\n                    posts.map(post => {\n                        return <PostLink key={post.id} post={post}/>\n                    })\n                }\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"postListDiv\">No Posts Found</div>\n        )\n    }\n};\n\nexport default PostList;","import React, {Component} from 'react';\nimport Comments from './Comments';\nimport './Comment.css';\n\nclass Comment extends Component {\n    render(){\n        let {comment, author} = this.props;\n        \n        //if there are any replies to this comment, create a new Comments object (will work recursively)\n        let replies = \"\";\n        if (comment.replies.length > 0){\n            replies = <Comments comments={comment.replies} author={author}/>;\n        }\n        \n        function toggleCommentClose(e){\n            e.preventDefault();\n            const commentDiv = e.target.parentNode.parentNode;\n            commentDiv.classList.toggle('closed');\n            if (commentDiv.classList.contains('closed')) e.target.innerText = '[ + ] ';\n            else e.target.innerText = '[ - ] ';\n        }\n        \n        return (\n            <div className=\"commentDiv\">\n                <div className=\"commentHeader\">\n                    <span className=\"commentClose\" onClick={toggleCommentClose}>[ - ] </span>\n                    <span className={comment.author === author ? \"commentAuthor OP\" : \"commentAuthor\"}>{comment.author}</span><span className=\"commentScore\"> | {comment.score}</span>\n                </div>\n                \n                <div className=\"commentText\" dangerouslySetInnerHTML={{ __html: comment.body_html }}></div>\n                \n                <div className=\"commentFooter\">\n                    <a className=\"commentPermalink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"http://www.reddit.com\"+comment.permalink}>Permalink</a>\n                </div>\n                {replies}\n            </div>\n        );\n    }\n}\n// const Comment = (props) => {\n// \n// }\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Comments = ({comments, author}) => {\n    if (comments && comments.length > 0) {\n        return (\n            <div className=\"comments\">\n            {\n                comments.map(comment => {\n                    if (!comment.author) return null;\n                    return <Comment key={comment.id} comment={comment} author={author} />\n                })\n            }\n            </div>\n        );\n    } else if (comments) {\n        return (\n            <div></div>\n        );\n    } else if (!comments){\n        return (\n            // <div>Loading Comments...</div>\n            <LoadingSpinner />\n        );\n    }\n}\n\nexport default Comments;","import React from 'react';\n\nconst SortButtons = ({onClick, currentSort, sortList}) => {\n    let sortChoices = {\n        1: ['Hot','New','Rising','Controversial','Top'],\n        2: ['Best','New','Top','Controversial','Old', 'Q&A'],\n    }\n    let sortOptions = sortChoices[sortList];\n    \n    return (\n        <div className=\"sortButtons\">\n            {\n                sortOptions.map((option,i) => {\n                    let className = 'sortButton';\n                    if (option.toLowerCase() === currentSort){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'best' && currentSort === 'confidence'){\n                        className += ' active';\n                    } else if (option.toLowerCase() === 'q&a' && currentSort === 'qa'){\n                        className += ' active';\n                    }\n                    return <span key={i} className={className} onClick={onClick}>{option.toLowerCase()}</span>\n                })\n            }\n        </div>\n    );\n};\n\nexport default SortButtons;","import React from 'react';\nimport Comments from './Comments';\nimport SortButtons from './SortButtons';\nimport Shared from '../shared';\nimport './Post.css';\n\nconst Post = (props) => {\n    let {title, body, comments, url, media, author, created} = props.postDetails;\n    let {currentSort, commentSortMethod} = props;\n    \n    //get relative time string\n    let dateString = Shared.getTimeString(created*1000);\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <div dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></div>;\n    if (/.(png|jpg|jpeg|bmp)$/.test(url)){\n        bodyTag = <img src={url} alt=\"Preview of content\"/>\n    }\n    \n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n    \n    //check for media embed and replace body with this\n    if (media && media.length > 0){\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <div dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></div>\n    }\n    \n    return (\n        <div>\n            {\n                title.length === 0 ? <h1 className=\"loading\">Loading...</h1> : (\n                    <div className=\"postDiv\">\n                        <h1>{title}</h1>\n                        <div className=\"postMiddle\">\n                            <span>{author}</span>\n                            <span className=\"postTime\"> | {dateString}</span>\n                            <a className=\"postGoToURL\" href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>\n                        </div>\n                        {bodyTag}\n                        {/* <hr/> */}\n                        <SortButtons onClick={commentSortMethod} currentSort={currentSort} sortList={2}/>\n                        <hr/>\n                        <Comments comments={comments} author={author} />\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\n\nconst Header = ({heading, onReload}) => {\n    return (\n        <h1 className=\"subHeader\">{heading} <span className=\"reloadButton\" onClick={onReload}>&#8635;</span></h1>\n    );\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SubList from './components/SubList';\nimport PostList from './components/PostList';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SortButtons from './components/SortButtons';\nconst pjson = require('../package.json');\n\nclass Page extends Component {\n    constructor(){\n        super();\n        this.state = {\n            sub: '',\n            postId: '',\n            sortMethod: 'hot',\n            commentSortMethod: 'new',\n            posts: [],\n            postDetails: {title: '', body: '', id: '', comments: []}\n        };\n    }\n    \n    render(){\n        let startPoint = pjson.startPoint;\n        return (\n            <div>\n                <SubList />\n                <Header heading={this.state.sub} onReload={this.onReload}/>\n                <SortButtons onClick={this.onChangeSortMethod} currentSort={this.state.sortMethod} sortList={1}/>\n                <hr/>\n                <Switch>\n                    <Route exact path={startPoint+'/'} render={props => <PostList {...props} posts={this.state.posts}/>} />\n                    <Route exact path={startPoint+'/:sub'} render={props => <PostList {...props} posts={this.state.posts}/>} />\n                    <Route exact path={startPoint+\"/:sub/:post\"} render={props => <Post {...props} postDetails={this.state.postDetails} commentSortMethod={this.onChangeCommentSortMethod} currentSort={this.state.commentSortMethod} />} />\n                </Switch>\n            </div>\n        );\n    }\n    \n    onReload = () => {\n        this.checkUrlAndUpdate(true);\n    }\n    \n    onChangeSortMethod = (e) => {\n        let sortMethod = e.target.innerText.toLowerCase();\n        this.setState({sortMethod});\n    }\n    \n    onChangeCommentSortMethod = (e) => {\n        let commentSortMethod = e.target.innerText.toLowerCase();\n\n        switch(commentSortMethod){\n            case 'best': this.setState({commentSortMethod:'confidence'}); break;\n            case 'q&a': this.setState({commentSortMethod:'qa'}); break;\n            default: this.setState({commentSortMethod}); break;\n        }\n    }\n    \n    parseBodyText(text){\n        text ? text = text\n                        .replace(/&lt;/g,'<')\n                        .replace(/&gt;/g,'>')\n                        .replace(/&amp;#39;/g,\"'\")\n                        .replace(/&amp;quot;/g,'\"')\n                        .replace(/&amp;/g,\"&\")\n                        .replace(/&#x200B;/g,' ')\n                         : text = '';\n        return text;\n    }\n\n    getPostList = async (sub) => {\n        if (sub.length > 0) sub = 'r/'+sub;\n        \n        try {\n            let url = 'https://www.reddit.com/'+sub+'/'+this.state.sortMethod+'/.json';\n            if (sub.length === 0) url = 'https://www.reddit.com/.json';\n\n            let response = await fetch(url);\n            let data = await response.json();\n\n            if (data.error){\n                this.setState({posts: null});\n            } else {\n                if (data && data.data && data.data.children){\n                    let posts = data.data.children.map(post => {\n                        const data = post.data;\n\n                        let media = data.media;\n                        if (media && media.oembed){\n                            media = this.parseBodyText(media.oembed.html);\n                        } else {\n                            media = '';\n                        }\n                        \n                        return {\n                            created: data.created_utc,\n                            author: data.author,\n                            domain: data.domain,\n                            title: this.parseBodyText(data.title),\n                            id: data.id,\n                            body: this.parseBodyText(data.selftext_html),\n                            num_comments: data.num_comments,\n                            score: data.score,\n                            subreddit: data.subreddit,\n                            stickied: data.stickied,\n                            url: data.url,\n                            thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                            permalink: data.permalink,\n                            media: media\n                        };\n                    });\n                    \n                    if (posts.length === 0) posts = null;\n                    this.setState({posts});\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            this.setState({posts:null});\n        }\n    };\n    \n    parseComment(comment){\n        let {body_html, id, author, permalink, replies, score} = comment;\n        body_html = this.parseBodyText(body_html);\n        \n        replies = typeof replies === 'object' ? replies.data.children : [];\n        \n        replies = replies.map(comment => {\n            //console.log(comment);\n            return this.parseComment(comment.data);\n        });\n        \n        return {body_html, id, author, permalink, replies, score};\n    }\n    \n    getPostDetails = async (url) => {\n        try {\n            let response = await fetch('https://www.reddit.com/r/'+url+'.json?sort='+this.state.commentSortMethod);\n            let data = await response.json();\n            \n            if (data.error){\n                this.setState({postDetails: {title: 'Not Found', body: '', id: ''}});\n            } else {\n                let {title, selftext_html, id, url, media, author, created_utc} = data[0].data.children[0].data;\n\n                let comments = data[1].data.children.map(obj => {\n                    return this.parseComment(obj.data);\n                });\n                \n                if (media && media.oembed){\n                    media = this.parseBodyText(media.oembed.html);\n                } else {\n                    media = '';\n                }\n\n                //if this exists, replace &lt etc with proper symbols, otherwise set to empty string\n                selftext_html = this.parseBodyText(selftext_html);\n                this.setState({postDetails: {title, body: selftext_html, id, url, media, comments, author, created: created_utc}});\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    checkUrlAndUpdate(force = false){\n        let startPoint = pjson.startPoint;\n        let url = this.props.location.pathname.replace(startPoint,'').replace('/','');\n        let parts = url.split('/');\n\n        if (parts.length === 1){\n            let sub = parts[0];\n            //on sub, so get post list\n            if (sub.toLowerCase() !== this.state.sub.toLowerCase() || force){\n                this.setState({sub: sub, posts:[]});\n                this.getPostList(url);\n            }\n        } else if (parts.length === 2){\n            let sub = parts[0];\n            let postId = parts[1];\n\n            if (sub.toLowerCase() !== this.state.sub.toLowerCase() || force){\n                this.setState({sub, posts: []});\n                this.getPostList(sub);\n            }\n            \n            if (postId.toLowerCase() !== this.state.postId.toLowerCase() || force){\n                //check if post details already exists within the current post array, and if so, use that for quicker rendering\n                let posts = this.state.posts || [];\n                let postInfo = posts.find(post => post.id === postId);\n                if (postInfo){\n                    this.setState({sub, postId, postDetails: postInfo});\n                } else {\n                    this.setState({sub, postId, postDetails: {title:'', body:'', id:''}});\n                }\n                this.getPostDetails(`${sub}/${postId}`);\n            }\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        let force = false;\n        if (prevState.sortMethod !== this.state.sortMethod) force = true;\n        if (prevState.commentSortMethod !== this.state.commentSortMethod) force = true;\n        this.checkUrlAndUpdate(force);        \n    }\n    \n    componentDidMount(){\n        this.checkUrlAndUpdate(true);\n    }\n}\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path='/' component={Page} />\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}